#  Oh my zsh
#-----------------------------------------------
ZSH=$HOME/.oh-my-zsh
ZSH_CUSTOM=$HOME/.zsh

plugins=(
  brew
  bundler
  gem
  git
  git-flow
  npm
  pod
  pow
  powder
  rails
  rbenv
  ruby
  linux
  osx
  zsh-syntax-highlighting
)

source $ZSH/oh-my-zsh.sh


#  Base
#-----------------------------------------------
# load math functions
zmodload -i zsh/mathfunc

# completion
fpath=($ZSH_CUSTOM/zsh-completions/src $fpath)
fpath=($ZSH_CUSTOM/completions $fpath)
autoload -Uz compinit
compinit

zstyle ':completion:*:match:*' original only

# history
setopt share_history
setopt inc_append_history
setopt hist_ignore_space

HISTFILE=~/.zsh_history
HISTSIZE=100000
SAVEHIST=100000

# emacs like keybind
bindkey -e

# disable r command so that I can use r-lang one
disable r

# colors
autoload colors


#  Options
#-----------------------------------------------
# print japanese chars
setopt print_eight_bit

# command correct edition before each completion attempt
# setopt correct

# auto directory pushd that you can get dirs list by cd -[tab]
setopt auto_pushd

# no beep sound
setopt nolistbeep
setopt no_beep

# range expansion
setopt brace_ccl

# do not create new history for the same command as last one
setopt hist_ignore_dups

# trim extra blanks
setopt hist_reduce_blanks

# ignore commands begin with spaces
setopt hist_ignore_space

# trailling slash for directory
setopt mark_dirs

# do not add duplication to directory stack
setopt pushd_ignore_dups

# complete pairs
setopt auto_param_keys

# ommittable ~
setopt cdable_vars


#  Named directories
#-----------------------------------------------
hash -d h=~
hash -d ht=~/Desktop
hash -d hl=~/Downloads

hash -d d=~/Develop
hash -d dc=~/Develop/creasty
hash -d dw=~/Develop/wantedly


#  Fish shell like syntax highlighting
#-----------------------------------------------
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)

ZSH_HIGHLIGHT_STYLES[default]=none
ZSH_HIGHLIGHT_STYLES[unknown-token]=none
ZSH_HIGHLIGHT_STYLES[reserved-word]=fg=magenta
ZSH_HIGHLIGHT_STYLES[alias]=fg=red
ZSH_HIGHLIGHT_STYLES[builtin]=fg=magenta
ZSH_HIGHLIGHT_STYLES[function]=fg=red
ZSH_HIGHLIGHT_STYLES[cursor]=none
ZSH_HIGHLIGHT_STYLES[command]=fg=red
ZSH_HIGHLIGHT_STYLES[precommand]=fg=red
ZSH_HIGHLIGHT_STYLES[commandseparator]=none
ZSH_HIGHLIGHT_STYLES[hashed-command]=none
ZSH_HIGHLIGHT_STYLES[path]=fg=green
ZSH_HIGHLIGHT_STYLES[path_prefix]=fg=green
ZSH_HIGHLIGHT_STYLES[path_approx]=fg=green
ZSH_HIGHLIGHT_STYLES[globbing]=fg=red
ZSH_HIGHLIGHT_STYLES[history-expansion]=fg=blue
ZSH_HIGHLIGHT_STYLES[single-hyphen-option]=fg=white
ZSH_HIGHLIGHT_STYLES[double-hyphen-option]=fg=white
ZSH_HIGHLIGHT_STYLES[back-quoted-argument]=fg=cyan
ZSH_HIGHLIGHT_STYLES[single-quoted-argument]=fg=green
ZSH_HIGHLIGHT_STYLES[double-quoted-argument]=fg=green
ZSH_HIGHLIGHT_STYLES[dollar-double-quoted-argument]=fg=cyan
ZSH_HIGHLIGHT_STYLES[back-double-quoted-argument]=fg=cyan
ZSH_HIGHLIGHT_STYLES[assign]=fg=yellow


#  Type ahead auto suggestion
#-----------------------------------------------
# AUTOSUGGESTION_HIGHLIGHT_COLOR=fg=white
# AUTOSUGGESTION_HIGHLIGHT_CURSOR=0
#
# zle-line-init() {
#   zle autosuggest-start
# }
# zle -N zle-line-init
#
# bindkey '^T' autosuggest-toggle


#  Direnv
#-----------------------------------------------
eval "$(direnv hook zsh)"


#  Apperance
#-----------------------------------------------
# set terminal title including current directory
case "${TERM}" in
  kterm*|xterm)
    precmd() {
      echo -ne "\033]0;${USER}@${HOST%%.*}:${PWD}\007"
    }
    ;;
esac


#  Prompt
#-----------------------------------------------
source ~/dotfiles/lib/git-prompt.sh

GIT_PS1_SHOWDIRTYSTATE=1
GIT_PS1_SHOWUNTRACKEDFILES=1
GIT_PS1_SHOWUPSTREAM=1

__git_ps1() {
  local g="$(__gitdir)"
  [ -z "$g" ] && return

  local r=""
  local b=""
  local step=""
  local total=""

  if [ -d "$g/rebase-merge" ]; then
    b="$(cat "$g/rebase-merge/head-name")"
    step=$(cat "$g/rebase-merge/msgnum")
    total=$(cat "$g/rebase-merge/end")

    if [ -f "$g/rebase-merge/interactive" ]; then
      r="|REBASE-i"
    else
      r="|REBASE-m"
    fi
  else
    if [ -d "$g/rebase-apply" ]; then
      step=$(cat "$g/rebase-apply/next")
      total=$(cat "$g/rebase-apply/last")
      if [ -f "$g/rebase-apply/rebasing" ]; then
        r="|REBASE"
      elif [ -f "$g/rebase-apply/applying" ]; then
        r="|AM"
      else
        r="|AM/REBASE"
      fi
    elif [ -f "$g/MERGE_HEAD" ]; then
      r="|MERGING"
    elif [ -f "$g/CHERRY_PICK_HEAD" ]; then
      r="|CHERRY-PICKING"
    elif [ -f "$g/REVERT_HEAD" ]; then
      r="|REVERTING"
    elif [ -f "$g/BISECT_LOG" ]; then
      r="|BISECTING"
    fi

    b="$(git symbolic-ref --short HEAD 2>/dev/null)" ||
    b="$(git describe --tags --exact-match HEAD 2> /dev/null)" ||
    b="$(cut -c1-7 "$g/HEAD" 2>/dev/null)..." ||
    b="unknown"
  fi

  if [ -n "$step" ] && [ -n "$total" ]; then
    r="$r $step/$total"
  fi

  local w=""
  local i=""
  local s=""
  local u=""
  local c=""
  local p=""

  if [ "true" = "$(git rev-parse --is-inside-git-dir 2>/dev/null)" ]; then
    if [ "true" = "$(git rev-parse --is-bare-repository 2>/dev/null)" ]; then
      c="BARE:"
    else
      b="GIT_DIR!"
    fi
  elif [ "true" = "$(git rev-parse --is-inside-work-tree 2>/dev/null)" ]; then
    if [ -n "${GIT_PS1_SHOWDIRTYSTATE-}" ] &&
        [ "$(git config --bool bash.showDirtyState)" != "false" ]
    then
      git diff --no-ext-diff --quiet --exit-code || w="*"
      if git rev-parse --quiet --verify HEAD >/dev/null; then
        git diff-index --cached --quiet HEAD -- || i="+"
      else
        i="#"
      fi
    fi
    if [ -n "${GIT_PS1_SHOWSTASHSTATE-}" ]; then
      git rev-parse --verify refs/stash >/dev/null 2>&1 && s="$"
    fi

    if [ -n "${GIT_PS1_SHOWUNTRACKEDFILES-}" ] &&
        [ "$(git config --bool bash.showUntrackedFiles)" != "false" ] &&
        [ -n "$(git ls-files --others --exclude-standard)" ]
    then
      u="%${ZSH_VERSION+%}"
    fi

    if [ -n "${GIT_PS1_SHOWUPSTREAM-}" ]; then
      __git_ps1_show_upstream
    fi
  fi

  printf -- " ${fg[blue]}on${fg[white]} %s ${fg[red]}%s%s%s${reset_color}" "$c${b##refs/heads/}" "$w$i$s$u" "$r" "$p"
}

PROMPT="
%F{blue}in %f%F{white}\${PWD/\$HOME/~}%f\$(__git_ps1)%f
%F{blue}❯ %f"

PROMPT2="%F{white}❯ %f"


#  Nortify done
#-----------------------------------------------
local COMMAND=""
local COMMAND_TIME=""

precmd() {
  if [ "$COMMAND_TIME" -ne "0" ] ; then
    local d=`date +%s`
    d=`expr $d - $COMMAND_TIME`
    if [ "$d" -ge "30" ] ; then
      COMMAND="$COMMAND "
      which growlnotify > /dev/null 2>&1 && growlnotify -t "${${(s: :)COMMAND}[1]}" -m "$COMMAND";
    fi
  fi
  COMMAND="0"
  COMMAND_TIME="0"
}
preexec () {
  COMMAND="${1}"
  if [ "`perl -e 'print($ARGV[0]=~/ssh|^vi/)' $COMMAND`" -ne 1 ] ; then
    COMMAND_TIME=`date +%s`
  fi
}
