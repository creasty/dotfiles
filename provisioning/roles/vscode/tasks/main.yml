- set_fact:
    vscode: {}
    code_bin: '{{ brew_bin_path }}/code'
    vscode_path: '{{ home_path }}/Library/Application Support/Code/User'

- name: install vscode
  homebrew_cask:
    name:  visual-studio-code
    state: latest

- name: get stat of the binary
  stat:
    path: '{{ code_bin }}'
  register: code_bin_stat
- fail:
    msg: 'The binary does not exist'
  when: code_bin_stat.stat.executable != True

- block:
    - name: allocate parent directories
      file:
        dest:    '{{ vscode_path }}/{{ item }}'
        state:   directory
        recurse: yes
      loop_control:
        label: '{{ vscode_path }}/{{ item }}'
      with_items: '{{ vscode.link.values() | map("dirname") | unique | list }}'

    - name: check destinations
      stat:
        path: '{{ vscode_path }}/{{ item.value }}'
      loop_control:
        label: '{{ item.value }}'
      with_dict: '{{ vscode.link }}'
      register: dest_stat

    - name: create backup files
      command: |
        mv -f \
          {{ vscode_path | quote }}/{{ item.item.value | quote }} \
          {{ vscode_path | quote }}/{{ item.item.value | quote }}.bak
      when: item.stat.exists and not item.stat.islnk
      loop_control:
        label: '{{ item.item.value }}'
      with_items: '{{ dest_stat.results }}'

    - name: create symlinks
      file:
        src:   '{{ dotfiles_path }}/{{ item.key }}'
        dest:  '{{ vscode_path }}/{{ item.value }}'
        state: link
        force: yes
      loop_control:
        label: '{{ item.value }}'
      with_dict: '{{ vscode.link }}'

  when: vscode.link

- name: get installed extensions
  command: |
    {{ code_bin }} --list-extensions
  register: installed_vscode_exts

- name: install extensions
  command: |
    {{ code_bin }} --install-extension {{ item | quote }}
  when: |
    vscode.extensions and installed_vscode_exts.stdout.find(item) == -1
  with_items: '{{ vscode.extensions }}'
