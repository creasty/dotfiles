#!/usr/bin/env bash

set -eu
set -o pipefail

CLUSTER="$1"
BRANCH="$2"
PORT_LOCAL="${3:-5000}"
PORT_REMOTE=8080

check_unbuffer() {
  command -v 'unbuffer' > /dev/null 2>&1 && return
  echo '`unbuffer` is not installed on this computer.'
  echo 'Try:'
  echo '    brew install expect'
}

forward_port() {
  local pod="$1"
  kube "$CLUSTER" port-forward "$pod" "$PORT_LOCAL:$PORT_REMOTE" &
}

scan_pod() {
  local pod_name=''
  local forwarded=0

  while IFS= read -r line; do
    echo "$line"

    if [[ -z "$pod_name" && "$line" =~ ^pod\ \"([^\"]+)\"\ created$ ]]; then
      pod_name="${BASH_REMATCH[1]}"
      echo "[kube-test] Pod name detected: $pod_name"
    fi

    if [[ $forwarded -eq 0 && "$line" =~ master\ process\ ready ]]; then
      echo "[kube-test] Start port forwarding: $PORT_REMOTE -> $PORT_LOCAL"
      forwarded=1
      forward_port "$pod_name"
    fi
  done
}

create_pod() {
  local rails_env=''

  case "$CLUSTER" in
    prod) rails_env="production" ;;
    *)    rails_env="$CLUSTER" ;;
  esac

  unbuffer kube "$CLUSTER" sh "$BRANCH" -- bundle exec unicorn -c 'config/unicorn.rb' -E "$rails_env"
}

main() {
  check_unbuffer
  create_pod | scan_pod
}

at_exit() {
  # FIXME: This doesn't terminate kube sh properly
  kill -TERM -$$
}

trap at_exit EXIT
trap 'trap - EXIT; at_exit; exit -1' SIGHUP SIGINT SIGTERM
main
