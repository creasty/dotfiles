#!/usr/bin/env bash

REPO="$(
  git config --get remote.origin.url \
    | grep github.com \
    | sed 's/^.*github\.com[:\/]\(.*\)\.git$/\1/' \
    | tr -d "\n"
)"

if [ -z "$REPO" ]; then
  echo 'Remote origin is not hosted at github.com' 1>&2
  exit 1
fi

HEAD="$(git symbolic-ref --short HEAD)"
PROJECT_DIR="$(git rev-parse --show-toplevel)"
GIT_DIR="$PROJECT_DIR/.git"

DEFAULT_PAR_PAGE=100


#  Functions
#-----------------------------------------------
client() {
  local method="$1"
  local url="https://api.github.com/$2"

  local cat_or_echo='cat'
  [ "$method" = 'GET' ] && cat_or_echo='echo'

  $cat_or_echo | curl "$url" \
    -sS \
    -X "$method" \
    -H 'Accept: application/vnd.github.v3+json' \
    -H "Authorization: token $GITHUB_ACCESS_TOKEN" \
    -d @-
}

editor() {
  if [ -z "${GIT_EDITOR:+set}" ]; then
    GIT_EDITOR="$(git var GIT_EDITOR)" || return $?
  fi

  eval "$GIT_EDITOR" '"$@"'
}

copy2clipboard() {
  if command -v pbcopy > /dev/null 2>&1; then
    echo -n "$1" | pbcopy
  fi
}

error() {
  echo -e "Error: $@" 1>&2
}


#  Commands
#-----------------------------------------------
list_issues() {
  local page="${1:-$DEFAULT_PAR_PAGE}"

  client GET "repos/$REPO/issues?per_page=$page" \
    | ruby -r json -e '
        begin
          JSON.parse($stdin.read).each do |issue|
            next if issue["pull_request"]
            puts "#%d %s" % [issue["number"], issue["title"]]
          end
        end
      '
}

list_pull_requests() {
  local page="${1:-$DEFAULT_PAR_PAGE}"

  client GET "repos/$REPO/pulls?per_page=$page" \
    | ruby -r json -e '
        begin
          JSON.parse($stdin.read).each do |issue|
            puts "#%d %s" % [issue["number"], issue["title"]]
          end
        end
      '
}

create_issue() {
  local file="$GIT_DIR/ISSUE_EDIT.markdown"

  echo > "$file"
  editor "$file"

  ruby -r json -e '
    begin
      title, body = $stdin.read.gsub(/\n?\r/, "\n").split /\n{2}/, 2

      unless title =~ /^\s*$/
        data = {
          title: title,
          body:  body,
        }
        puts data.to_json
      end
    end
  ' < "$file" \
    | client POST "repos/$REPO/issues" \
    | ruby -r json -e '
        begin
          res = JSON.parse $stdin.read
          puts res["html_url"] || res["message"]
        end
      ' \
    | tr -d "\n" \
    | {
      res="$(cat)"

      case "$res" in
        http*)
          echo "$res"
          [ -t 1 ] && copy2clipboard "$res"
          ;;

        *)
          error "${res:-"Couldn't create issue"}"
          exit 1
          ;;
      esac
    }
}

create_pull_request() {
  local head="${1:-$HEAD}"
  local base="${2:-master}"

  local commits="$(git log --pretty=format:'%s' "${base}..${head}" | cat)"
  local last_commit="$(echo "$commits" | head -n 1)"

  if [ -z "$last_commit" ]; then
    error 'No commits'
    exit 1
  fi

  git push origin "$head" || exit 1

  local file="$GIT_DIR/PULLREQ_EDIT.markdown"
  local section='Create a new pull request'

  local body="$last_commit

> $section to \`$base\` from \`$head\`:
>
$(echo "$commits" | sed 's/^/> - /')"

  echo -e "$body" > "$file"
  editor "$file"

  ruby -r json -e '
    begin
      head, base = ARGV
      title, body = $stdin.read.gsub(/\n?\r/, "\n").split /\n{2}/, 2
      body = body.to_s.sub /^> '"$section"'.+(\n>.*)+/, ""

      unless title =~ /^\s*$/
        data = {
          title: title,
          body:  body,
          head:  head,
          base:  base,
        }
        puts data.to_json
      end
    end
  ' "$head" "$base" < "$file" \
    | client POST "repos/$REPO/pulls" \
    | ruby -r json -e '
        begin
          res = JSON.parse $stdin.read
          puts res["html_url"] || res["message"]
        end
      ' \
    | tr -d "\n" \
    | {
      res="$(cat)"

      case "$res" in
        http*)
          echo "$res"
          [ -t 1 ] && copy2clipboard "$res"
          ;;

        *)
          error "${res:-"Couldn't create pull request"}"
          exit 1
          ;;
      esac
    }
}

show_help() {
  cat <<HELP
usage: git github <command>
usage: git github -h

Commands:

ls-issue [size]
    List issues of the repository
ls-pr [size]
    List pull requests of the repository
mk-issue
    Create new issue
mk-pr [head] [base]
    Create new pull request to head from base
    head is default to master; base is to the current branch
HELP
}


#  Dispatch
#-----------------------------------------------
COMMAND="$1"
shift

case "$COMMAND" in
  ls-issue)
    list_issues "$1"
    ;;

  ls-pr)
    list_pull_requests "$1"
    ;;

  mk-issue)
    create_issue
    ;;

  mk-pr)
    create_pull_request "$1" "$2"
    ;;

  -h|'')
    show_help
    ;;

  -*)
    error "Unknown option: $COMMAND"
    exit 1
    ;;

  *)
    error "Command not found: $COMMAND"
    exit 1
    ;;
esac
