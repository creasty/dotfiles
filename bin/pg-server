#!/usr/bin/env bash
#> pg-server <command>
#>
#> COMMANDS:
#>     pg-server start
#>     pg-server stop
#>     pg-server destroy
#>     pg-server psql
#>     pg-server createdb $dbname
#>     pg-server ping

set -eu
set -o pipefail

NAME=the_postgres
IMAGE=postgres:9.6.1-alpine


#  Utils
#-----------------------------------------------
do_help() {
  cat "$0" \
    | grep '^#>' \
    | sed -e 's/#> //g' -e 's/#>//g'
  exit 0
}


#  Commands
#-----------------------------------------------
server_stop() {
  echo "==> Stopping server"
  docker stop $NAME
}

server_start() {
  echo "==> Starting server"
  docker start $NAME || server_create
}

server_destory() {
  echo "==> Destroying server"
  docker rm $NAME
}

server_create() {
  echo "==> Creating server"
  docker run \
    -p 5432:5432 \
    --name $NAME \
    -e POSTGRES_USER=$USER \
    -e POSTGRES_PASSWORD= \
    -v ~/docker/postgres:/var/lib/postgresql/data \
    -d \
    $IMAGE
}

exec_psql() {
  docker exec -it $NAME psql --username=$USER
}

exec_createdb() {
  docker exec -it $NAME createdb --username=$USER "$1"
}

exec_ping() {
  docker exec -it $NAME psql --username=$USER -c 'select 1;' 2>&1 > /dev/null
  if [ $? -eq 0 ]; then
    echo 'running'
  else
    echo 'not running'
  fi
}


#  Entrypoint
#-----------------------------------------------
COMMAND="${1:-}"
shift || true

case "$COMMAND" in
  start)
    server_start
    ;;
  stop)
    server_stop
    ;;
  destroy)
    server_destory
    ;;
  psql)
    exec_psql
    ;;
  createdb)
    exec_createdb "$1"
    ;;
  ping)
    exec_ping
    ;;
  *)
    do_help
    ;;
esac
