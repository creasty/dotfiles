#!/usr/bin/env bundle exec ruby

require 'rubygems'
require 'pathname'
require 'optparse'


APP_ROOT = Pathname.new File.dirname(Bundler.default_gemfile)

options = ARGV.getopts 'rails'
name    = ARGV[0]

exit if !name || '' == name


#  Retrive files
#-----------------------------------------------
if options['rails']
  require File.expand_path(APP_ROOT.join('config', 'environment'))
  files = I18n.load_path
else
  files = Dir.glob APP_ROOT.join('config', 'locales', '**', '*.{yaml,yml}')
end


#  Scanner
#-----------------------------------------------
puts 'Scanning...'

scopes     = name.split '.'
scope_size = scopes.size
founds     = []

files.reverse.each do |file|
  File.open(file) do |f|
    current_level  = 0
    current_locale = nil
    another_exists = false

    f.each_line.with_index do |line, n|
      next unless line =~ /\A([ ]*)(["']|)(\w+)\2:\s*(.*)\s*\z/

      indent, scope, text = $1, $3, $4
      level = indent.size >> 1

      if level == 0 && text == ''
        current_locale = scope
        current_level  = 1
        next
      end

      if level == current_level
        if scope == scopes[current_level]
          if level == scope_size
            founds << {
              locale:     current_locale,
              file:       Pathname.new(file).relative_path_from(APP_ROOT).to_s,
              line:       n + 1,
              conflicted: another_exists,
              text:       (text == '') ? '{ ... }' : text,
            }
            another_exists = true
          elsif '' == text
            current_level = level + 1
          end
        end
      elsif level < current_level
        current_level = level
      end
    end
  end
end


#  Output results
#-----------------------------------------------
if founds.any?
  founds.reverse.each.with_index do |found, i|
    # if i == 1
    #   puts "\n"
    #   puts "Conflicts"
    #   puts "========="
    # end

    puts
    #puts found[:locale], found[:conflicted]
    puts '- %s:%d' % [found[:file], found[:line]]
    puts found[:text]
  end
else
  puts
  puts "Can't find '%s'" % name
end
