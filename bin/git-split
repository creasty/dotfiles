#!/usr/bin/env bash
#
#+ Usage: git split <name>
#+
#+ Create a new branch named <name> pointed at HEAD and reset the current branch
#+ to the head of its tracking branch. This is useful when working on master and
#+ you realize you should be on a topic branch.

set -e

die() {
  echo "$@" 1>&2
  exit 1
}

shortsha() {
  echo "$1" | cut -c1-7
}

if [ -z "$1" -o "$1" = "--help" ]; then
  grep '^#+' "$0" |cut -c4-
  exit 0
fi

branch="$1"

ref=$(git symbolic-ref -q HEAD)
sha=$(git rev-parse HEAD)
[ -n "$ref" ] || die "you're not on a branch"

current=$(echo "$ref" |sed 's@^refs/heads/@@')
[ -n "$current" ] || die "you're in a weird place; get on a local branch"

remote=$(git config --get "branch.$current.remote" || true)
merge=$(git config --get "branch.$current.merge" | sed 's@refs/heads/@@')

if [ -n "$remote" -a -n "$merge" ]; then
  tracking="$remote/$merge"
elif [ -n "$merge" ]; then
  tracking="$merge"
else
  die "$current is not tracking anything"
fi

if ! git diff-index --quiet --cached HEAD || ! git diff-files --quiet; then
  die "cannot cut branch with changes to index or working directory"
fi

git branch "$branch"
git reset -q --hard "$tracking"
git checkout -q "$branch"
git branch --set-upstream-to "$branch" "$tracking"
git reset -q --hard "$sha"
echo "[$(shortsha "$sha")...$(shortsha $(git rev-parse $tracking))] $current"
echo "[0000000...$(shortsha $(git rev-parse HEAD))] $branch"
