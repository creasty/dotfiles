#!/usr/bin/env bash

set -eu
set -o pipefail

SA="$1"
CA_CRT=".${SA}.crt.$RANDOM"

CONTEXT=''
CLUSTER=''
SERVER=''

KUBECTL="google-cloud-sdk kubectl"

#=== Tasks
#==============================================================================================
get_context() {
  echo "==> Retrive context"

  CONTEXT="$($KUBECTL config current-context | tr -d "\n\r")"
  echo "Context: $CONTEXT"

  CLUSTER="$($KUBECTL config view -o "jsonpath={.contexts[?(@.name==\"$CONTEXT\")].context.cluster}")"
  echo "Cluster: $CLUSTER"

  SERVER="$($KUBECTL config view -o "jsonpath={.clusters[?(@.name==\"$CLUSTER\")].cluster.server}")"
  echo "Server: $SERVER"
}

fetch_secrets() {
  echo "==> Fetch secrets"

  local secret="$($KUBECTL get sa "$SA" -o 'jsonpath={.secrets[0].name}')"
  if [ -z "$secret" ]; then
    echo "serviceaccounts \"$SA\" doesn't have a serviceaccount token." >&2
    exit 2
  fi

  NAMESPACE="$($KUBECTL get secret "$secret" -o "jsonpath={.data.namespace}" | openssl enc -d -base64 -A)"
  echo "Namespace: $NAMESPACE"

  TOKEN="$($KUBECTL get secret "$secret" -o "jsonpath={.data.token}" | openssl enc -d -base64 -A)"
  echo "Token: ${TOKEN::8}***"

  $KUBECTL get secret "$secret" -o "jsonpath={.data.ca\.crt}" | openssl enc -d -base64 -A > "$CA_CRT"
  echo "CA Cert: $CA_CRT"
}

configure() {
  echo "==> Configure"

  export KUBECONFIG="./${SA}.config"
  touch "$KUBECONFIG"

  $KUBECTL config set-credentials "$SA" --token="$TOKEN"
  $KUBECTL config set-cluster "$CLUSTER" --server="$SERVER" --certificate-authority="$CA_CRT" --embed-certs
  $KUBECTL config set-context "$CONTEXT" --cluster="$CLUSTER" --namespace="$NAMESPACE" --user="$SA"
  $KUBECTL config use-context "$CONTEXT"

  echo "done"
}

at_exit() {
  [ -f "$CA_CRT" ] && rm "$CA_CRT"
}

#=== Entrypoint
#==============================================================================================
main() {
  get_context
  fetch_secrets
  configure
}

trap at_exit EXIT
trap 'trap - EXIT; at_exit; exit -1' SIGHUP SIGINT SIGTERM

main
