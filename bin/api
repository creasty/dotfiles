#!/usr/bin/env zsh

set -eu
set -o pipefail


#  Utils
#-----------------------------------------------
do_help() {
  cat <<HELP
api <options> [get|post|put|patch|delete] \$path

OPTIONS:
  -p          Use a \`production\` server (default is \`development\`)
  -s          Request with system's credentials (basic auth)
  -u{name}    Request with user's credentials (access token)
              {name} -- select other variation of access tokens
  -x          Debug
  -h          Show help

COMMANDS:
  api help    Show help

GIT CONFIG:
  api.{env}.url
  api.{env}.access-token
  api.{env}.access-token-{name}
  api.{env}.basic-auth-cred
HELP
  exit 0
}

fatal() {
  printf "\e[0;31m[ERROR]\e[0m $@\n" 1>&2
  exit 1
}


#  Parse args
#-----------------------------------------------
METHOD=''
REQ_PATH=''
OPTIONS=('-sv')
ARGS=('')

TOKEN_ID='access-token'
API_ENV='development'
AUTH_MODE='none'
CONTENT_TYPE='json'
DEBUG_FLAG=0

for a in "$@"; do
  if [ -n "$REQ_PATH" ]; then
    ARGS=(${ARGS[@]} "$a")
    [ "$a" = '-F' ] && CONTENT_TYPE='form'
    continue
  fi

  case "$a" in
    help|-h)
      do_help
      ;;
    -p)
      API_ENV='production'
      ;;
    -u=*)
      AUTH_MODE='user_custom'
      if [ ${#a} -gt 3 ]; then
        TOKEN_ID="${a:3}"
      fi
      ;;
    -u*)
      AUTH_MODE='user'
      if [ ${#a} -gt 2 ]; then
        TOKEN_ID="${TOKEN_ID}-${a:2}"
      fi
      ;;
    -s)
      AUTH_MODE='system'
      ;;
    -x)
      DEBUG_FLAG=1
      ;;
    -*)
      echo "Unknown option: $a" 1>&2
      exit 1
      ;;
    get|post|put|patch|delete)
      METHOD="$(tr '[a-z]' '[A-Z]' <<< "$a")"
      ;;
    *)
      REQ_PATH="$a"
      ;;
  esac
done

case "$CONTENT_TYPE" in
  json)
    OPTIONS=(${OPTIONS[@]} -H 'Content-Type: application/json')
  ;;
esac

if [ -p /dev/stdin ]; then
  OPTIONS=(${OPTIONS[@]} -d '@-')
fi


#  Auth
#-----------------------------------------------
CONFIG_URL_KEY="api.${API_ENV}.url"
CONFIG_ACCESS_TOKEN_KEY="api.${API_ENV}.${TOKEN_ID}"
CONFIG_BASIC_AUTH_CRED_KEY="api.${API_ENV}.basic-auth-cred"
CONFIG_TOKEN_HEADER_KEY="api.${API_ENV}.token-header"

URL="$(git config "$CONFIG_URL_KEY" 2> /dev/null || true)"
if [ -z "$URL" ]; then
  fatal "No value for $CONFIG_URL_KEY\n\tRun:  git config --set $CONFIG_URL_KEY \$value"
fi

TOKEN_HEADER_MODE="$(git config "$CONFIG_TOKEN_HEADER_KEY" 2> /dev/null || true)"
[ -z "$TOKEN_HEADER_MODE" ] && TOKEN_HEADER_MODE='token'

TOKEN_HEADER=''
case "$TOKEN_HEADER_MODE" in
  bearer)
    TOKEN_HEADER='Authorization: Bearer %s'
    ;;
  token)
    TOKEN_HEADER='Authorization: Token token=%s'
    ;;
esac

case "$AUTH_MODE" in
  user_custom)
    OPTIONS=(${OPTIONS[@]} -H "$(printf "$TOKEN_HEADER" "$TOKEN_ID")")
    ;;

  user)
    ACCESS_TOKEN="$(git config "$CONFIG_ACCESS_TOKEN_KEY" 2> /dev/null || true)"
    if [ -n "$ACCESS_TOKEN" ]; then
      OPTIONS=(${OPTIONS[@]} -H "$(printf "$TOKEN_HEADER" "$ACCESS_TOKEN")")
    else
      fatal "No value for $CONFIG_ACCESS_TOKEN_KEY\n\tRun:  git config --set $CONFIG_ACCESS_TOKEN_KEY \$value"
    fi
    ;;

  system)
    BASIC_AUTH_CRED="$(git config "$CONFIG_BASIC_AUTH_CRED_KEY" 2> /dev/null || true)"
    if [ -n "$BASIC_AUTH_CRED" ]; then
      OPTIONS=(${OPTIONS[@]} -u "$BASIC_AUTH_CRED")
    else
      fatal "No value for $CONFIG_BASIC_AUTH_CRED_KEY\n\tRun:  git config --set $CONFIG_BASIC_AUTH_CRED_KEY \$value"
    fi
    ;;
esac


#  Regulate
#-----------------------------------------------
METHOD=${METHOD:=GET}
[ "${REQ_PATH:0:1}" != "/" ] && REQ_PATH="/$REQ_PATH"
[ "${URL: -1}" = "/" ] && URL="${URL:0:-1}"


#  Exec
#-----------------------------------------------
if [ "$DEBUG_FLAG" -eq 1 ]; then
  echo "URL:               $URL"
  echo "REQ_PATH:          $REQ_PATH"
  echo "METHOD:            $METHOD"
  echo "OPTIONS:           ${OPTIONS[@]}"
  echo "ARGS:              ${ARGS[@]}"
  echo "API_ENV:           $API_ENV"
  echo "AUTH_MODE:         $AUTH_MODE"
  echo "CONTENT_TYPE:      $CONTENT_TYPE"
  echo "TOKEN_HEADER_MODE: $TOKEN_HEADER_MODE"

  qoptions=''
  for opt in "${OPTIONS[@]}"; do
    qopt="$(printf "%q" "$opt")"
    echo "<$qopt>"
    [ "$qopt" != "$opt" ] && qopt="\"${opt//\"/\\\"}\""
    [ "${qopt:0:1}" = "-" ] && qopt=" \\
  $qopt" || qopt=" $qopt"

    qoptions="${qoptions}${qopt}"
  done

  [ ${#ARGS} -gt 0 ] && args_sep=" \\
  " || args_sep=""

  cat <<CURL

curl
  -X "$METHOD" \\
  "$URL$REQ_PATH"${qoptions}${args_sep}${ARGS[@]}
CURL
elif [ -n "$REQ_PATH" ]; then
  curl \
    -X "$METHOD" \
    "${URL}${REQ_PATH}" \
    ${OPTIONS[@]} \
    ${ARGS[@]}
else
  exit 1
fi
