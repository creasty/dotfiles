#!/usr/bin/env bash
#> postgres <command>
#>
#> COMMANDS:
#>     postgres start
#>     postgres stop
#>     postgres destroy
#>     postgres psql
#>     postgres createdb $dbname
#>     postgres status
#>     postgres logs

set -eu
set -o pipefail

NAME=the-postgres
IMAGE=postgres:9.6.1-alpine

#  Utils
#-----------------------------------------------
do_help() {
  cat "$0" | sed -n -E '/^#>/s/^#>[ ]?//p'
  exit 1
}

#  Commands
#-----------------------------------------------
_ping() {
  docker exec -it $NAME psql --username=$USER -c 'select 1;' > /dev/null 2>&1
}

server_stop() {
  echo "==> Stopping server"
  docker stop $NAME
}

server_start() {
  echo "==> Starting server"
  docker start $NAME 2>/dev/null || server_create

  echo "==> Waiting for ready"
  while true; do
    sleep 5
    if _ping; then
      echo
      echo "ready"
      break
    else
      printf '.'
    fi
  done
}

server_destory() {
  echo "==> Destroying server"
  docker rm $NAME
}

server_create() {
  echo "==> Creating server"
  docker run \
    -p 5432:5432 \
    --name $NAME \
    -e POSTGRES_USER=$USER \
    -e POSTGRES_PASSWORD= \
    -v ~/docker/postgres:/var/lib/postgresql/data \
    -d \
    $IMAGE
}

exec_psql() {
  docker exec -it $NAME psql --username=$USER
}

exec_createdb() {
  docker exec -it $NAME createdb --username=$USER "$1"
}

exec_logs() {
  docker logs -f $NAME
}

exec_status() {
  if docker ps | grep $NAME > /dev/null; then
    if _ping; then
      echo 'ready'
    else
      echo 'not ready'
    fi
  else
    echo 'not running'
  fi
}

#  Entrypoint
#-----------------------------------------------
COMMAND="${1:-}"
shift || true

case "$COMMAND" in
  start)    server_start ;;
  stop)     server_stop ;;
  destroy)  server_destory ;;
  psql)     exec_psql ;;
  createdb) exec_createdb "$1" ;;
  status)   exec_status ;;
  logs)     exec_logs ;;
  *)        do_help ;;
esac
