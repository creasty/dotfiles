#!/usr/bin/env bash

cd $DOTFILES_PATH
source $DOTFILES_PATH/lib/helpers.sh


#  Xcode command line tool
#-----------------------------------------------
init_xcode_clt() {
  section "Installing Xcode command line tool"
  xcode-select --install > /dev/null 2>&1

  if [ $? -ne 0 ]; then
    print_info "Installed"
  else
    print_success "OK"
  fi
}

init_xcode_clt


#  Homebrew
#-----------------------------------------------
init_homebrew() {
  section "Installing homebrew"

  if cmd_exists brew; then
    print_info "Installed"
  else
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    print_status $?
  fi

  section "Installing brew packages"
  bash < ./Brewfile

  section "Configure redis"
  sed -ie 's/^daemonize no/daemonize yes/' /usr/local/etc/redis.conf
}

init_homebrew


#  rbenv
#-----------------------------------------------
init_rbenv() {
  ruby_versions=(
    2.1.1
    2.1.5
  )
  default_version=2.1.5

  installed_ruby_versions="$(rbenv versions --bare)"

  section "Installing ruby"

  subsection "Upgrading ruby-build"
  brew upgrade ruby-build > /dev/null 2>&1
  print_success "OK"

  for version in "${ruby_versions[@]}"; do
    installed="$(echo -n "$installed_ruby_versions" | grep $version)"

    subsection "Ruby v$version"

    if [ "$installed" == "" ]; then
      rbenv install $version
      print_status $?
    else
      print_info "Installed"
    fi
  done

  subsection "Set global ruby to v"
  rbenv global $version
  print_status $?
}

init_rbenv


#  NVM
#-----------------------------------------------
init_nvm() {
  section "Installing nodejs"

  subsection "Installing nvm"
  if cmd_exists nvm; then
    print_info "Installed"
  else
    curl https://raw.githubusercontent.com/creationix/nvm/v0.17.3/install.sh | bash
  fi

  subsection "Installing nvm"
  nvm install 0.10
  print_status $?
}

init_nvm


#  Node packages
#-----------------------------------------------
init_npm() {
  section "Installing nodejs packages"

  npm i -g
}

init_npm


#  Vagrant
#-----------------------------------------------
init_vagrant() {
  section "Installing vagrant boxes"
  subsection "CentOS 6.5 x86_64"
  vagrant box add centos65 https://github.com/2creatives/vagrant-centos/releases/download/v6.5.3/centos65-x86_64-20140116.box
  print_status $?

  subsection "CentOS 7.0 x86_64"
  vagrant box add centos70 https://f0fff3908f081cb6461b407be80daf97f07ac418.googledrive.com/host/0BwtuV7VyVTSkUG1PM3pCeDJ4dVE/centos7.box
  print_status $?

  section "Installing vagrant plugins"
  vagrant plugin install sahara
  print_status $?
}

init_vagrant


#  R
#-----------------------------------------------
init_r() {
  section "Installing R packages"

  r -f package.r
}

init_r


#  Haskell
#-----------------------------------------------
init_haskell() {
  section "Installing Haskell packages"

  subsection "Updating cabal"
  cabal update
  print_status $?

  subsection "Installing packages"
  cabal install cabal-install
  cabal install erd
}

init_haskell


#  Lua
#-----------------------------------------------
init_lua() {
  section "Installing Lua packages"

  luarocks install md5
  luarocks install stdlib
  luarocks install lgi
  luarocks install lpeg
  luarocks install luaexpat
  luarocks install inspect
  luarocks install luaepnf
  luarocks install luarepl
  luarocks install cassowary
}

init_lua


#  Python
#-----------------------------------------------
init_python() {
  section "Installing Python packages"
  pip install howdoi
  pip install numpy
  pip install mitmproxy
  pip install protobuf
  pip install pyamf
}

init_python


#  Golang
#-----------------------------------------------
init_golang() {
  section "Installing Golang packages"
  go get github.com/rakyll/boom
}

init_golang
