#  Editing
#-----------------------------------------------
[[plugins]] # define your own operator easily
repo = 'kana/vim-operator-user'

[[plugins]] # operator to camelize/decamelize a specified text
repo = 'tyru/operator-camelize.vim'
depends = ['vim-operator-user']
on_map = ['<Plug>(operator-camelize-toggle)']
hook_add = '''
nmap gC <Plug>(operator-camelize-toggle)
xmap C <Plug>(operator-camelize-toggle)
'''

[[plugins]] # operator to replace text with register content
repo = 'kana/vim-operator-replace'
depends = ['vim-operator-user']
on_map = ['<Plug>(operator-replace)']
hook_add = '''
nmap r <Plug>(operator-replace)
xmap r <Plug>(operator-replace)
omap r <Plug>(operator-replace)
nnoremap R r
xnoremap R r
onoremap R r
'''

[[plugins]] # a simple, easy-to-use Vim alignment plugin
repo = 'junegunn/vim-easy-align'
on_map = ['<Plug>(EasyAlign)']
hook_add = '''
xmap <silent> L <Plug>(EasyAlign)
'''

[[plugins]] # auto close parentheses and repeat by dot
repo = 'cohama/lexima.vim'
on_func = ['lexima#']
on_event = ['InsertEnter', 'CmdlineEnter']
hook_add = '''
let g:lexima_map_escape = ''
let g:lexima_enable_endwise_rules = 0
'''
hook_source = '''
call user#plugin#lexima#init()
'''

[[plugins]] # maniplate selected text easily
repo = 't9md/vim-textmanip'
on_map = ['<Plug>(textmanip-']
hook_add = '''
let g:textmanip_enable_mappings = 0

let g:textmanip_hooks = {}
function! g:textmanip_hooks.finish(tm) abort
  let l:tm = a:tm
  let l:helper = textmanip#helper#get()
  if !l:tm.linewise
    call l:helper.remove_trailing_WS(l:tm)
  endif
endfunction

xmap <C-j> <Plug>(textmanip-move-down)
xmap <C-k> <Plug>(textmanip-move-up)
xmap <C-h> <Plug>(textmanip-move-left)
xmap <C-l> <Plug>(textmanip-move-right)
xmap <Space><C-j> <Plug>(textmanip-duplicate-down)
xmap <Space><C-k> <Plug>(textmanip-duplicate-up)
xmap <Space><C-h> <Plug>(textmanip-duplicate-left)
xmap <Space><C-l> <Plug>(textmanip-duplicate-right)
'''

[[plugins]] # Neovim motions on speed!
repo = 'phaazon/hop.nvim'
on_cmd = ['HopChar1']
hook_add = '''
nnoremap s <Cmd>HopChar1<CR>
'''
hook_source = '''
lua require'hop'.setup()
'''

[[plugins]] # Neovim plugin for GitHub Copilot
repo = 'creasty/copilot.vim' # github/copilot.vim
on_event = ['InsertEnter']
on_cmd = ['Copilot']
on_func = ['copilot#']
hook_add = '''
let g:copilot_no_tab_map = v:true
let g:copilot_assume_mapped = v:true
'''

#  Navigation
#-----------------------------------------------
[[plugins]] # switch to the missing file without interaction
repo = 'kana/vim-altr'
on_map = ['<Plug>(altr-']
hook_source = '''
call user#plugin#altr#lazy_init()
'''
hook_add = '''
nmap ga <Plug>(altr-forward)
nmap gA <Plug>(altr-back)
'''

[[plugins]] # A Git wrapper so awesome, it should be illegal
repo = 'tpope/vim-fugitive'
on_cmd = ['Git', 'GBrowse']
hook_add = '''
let g:fugitive_browse_handlers = [function('user#plugin#fugitive#browse_handler')]
command! -nargs=0 GBlame :Git blame
'''
