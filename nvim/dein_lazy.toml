#  Editing
#-----------------------------------------------
[[plugins]] # define your own operator easily
repo = 'kana/vim-operator-user'

[[plugins]] # operator to camelize/decamelize a specified text
repo = 'tyru/operator-camelize.vim'
depends = ['vim-operator-user']
on_map = ['<Plug>(operator-camelize-toggle)']
hook_add = '''
nmap gC <Plug>(operator-camelize-toggle)
xmap C <Plug>(operator-camelize-toggle)
'''

[[plugins]] # operator to replace text with register content
repo = 'kana/vim-operator-replace'
depends = ['vim-operator-user']
on_map = ['<Plug>(operator-replace)']
hook_add = '''
nmap r <Plug>(operator-replace)
xmap r <Plug>(operator-replace)
omap r <Plug>(operator-replace)
nnoremap R r
xnoremap R r
onoremap R r
'''

[[plugins]] # a simple, easy-to-use Vim alignment plugin
repo = 'junegunn/vim-easy-align'
on_map = ['<Plug>(EasyAlign)']
hook_add = '''
xmap <silent> L <Plug>(EasyAlign)
'''

[[plugins]] # auto close parentheses and repeat by dot
repo = 'cohama/lexima.vim'
on_func = ['lexima#']
on_event = ['InsertEnter', 'CmdlineEnter']
hook_add = '''
let g:lexima_map_escape = ''
'''
hook_source = '''
call user#plugin#lexima#init()
'''

[[plugins]] # maniplate selected text easily
repo = 't9md/vim-textmanip'
on_map = ['<Plug>(textmanip-']
hook_add = '''
let g:textmanip_enable_mappings = 0

let g:textmanip_hooks = {}
function! g:textmanip_hooks.finish(tm) abort
  let l:tm = a:tm
  let l:helper = textmanip#helper#get()
  if !l:tm.linewise
    call l:helper.remove_trailing_WS(l:tm)
  endif
endfunction

xmap <C-j> <Plug>(textmanip-move-down)
xmap <C-k> <Plug>(textmanip-move-up)
xmap <C-h> <Plug>(textmanip-move-left)
xmap <C-l> <Plug>(textmanip-move-right)
xmap <Space><C-j> <Plug>(textmanip-duplicate-down)
xmap <Space><C-k> <Plug>(textmanip-duplicate-up)
xmap <Space><C-h> <Plug>(textmanip-duplicate-left)
xmap <Space><C-l> <Plug>(textmanip-duplicate-right)
'''

[[plugins]] # create your own submodes
repo = 'kana/vim-submode'
on_event = ['CursorHold', 'FocusLost']
hook_source = '''
call user#plugin#submode#init()
'''

[[plugins]] # emmet for vim: HTML and CSS hi-speed coding
repo = 'mattn/emmet-vim'
on_func = ['emmet']
hook_add = '''
let g:user_emmet_install_global = 0
let g:user_emmet_mode = 'i'
let g:user_emmet_leader_key = '<Nop>'
'''

[[plugins]] # Neovim motions on speed!
repo = 'phaazon/hop.nvim'
on_cmd = ['HopChar1']
hook_add = '''
nnoremap s <Cmd>HopChar1<CR>
'''
hook_source = '''
lua require'hop'.setup()
'''

#  Navigation
#-----------------------------------------------
[[plugins]] # dark powered asynchronous unite all interfaces for neovim/vim8
repo = 'Shougo/denite.nvim'
on_cmd = ['Denite']
hook_source = '''
call user#plugin#denite#lazy_init()
'''
hook_add = '''
augroup _init_denite
  autocmd!
  autocmd FileType denite call user#plugin#denite#init_denite_list()
  autocmd FileType denite-filter call user#plugin#denite#init_denite_filter()
augroup END

command! -nargs=0 Open :call user#plugin#denite#open()
command! -nargs=? -bang -complete=dir Rg :call user#plugin#denite#rg(<q-args>, <bang>0)

nnoremap <silent> <C-q> <Cmd>Open<CR>
nnoremap <silent> <Space>/ <Cmd>Rg!<CR>
'''

[[plugins]] # switch to the missing file without interaction
repo = 'kana/vim-altr'
on_map = ['<Plug>(altr-']
hook_source = '''
call user#plugin#altr#lazy_init()
'''
hook_add = '''
nmap ga <Plug>(altr-forward)
nmap gA <Plug>(altr-back)
'''

[[plugins]] # A Git wrapper so awesome, it should be illegal
repo = 'tpope/vim-fugitive'
on_cmd = ['Git', 'GBrowse']
hook_add = '''
let g:fugitive_browse_handlers = [function('user#plugin#fugitive#browse_handler')]
'''

# [[plugins]] # All the lua functions I don't want to write twice
# repo = 'nvim-lua/plenary.nvim'
# on_lua = 'plenary'

# [[plugins]] # An implementation of the Popup API from vim in Neovim
# repo = 'nvim-lua/popup.nvim'

# [[plugins]] # An extension for telescope.nvim that allows you to find/filter/preview/pick results from coc.nvim.
# repo = 'fannheyward/telescope-coc.nvim'
# on_source = ['telescope.nvim']

# [[plugins]] # Gaze deeply into unknown regions using the power of the moon
# repo = 'nvim-telescope/telescope.nvim'
# depends = ['popup.nvim', 'plenary.nvim']
# on_cmd = ['Telescope']
# hook_source = '''
# lua require('user.plugin.telescope')
# '''
# hook_add = '''
# nnoremap <Space>tr <Cmd>Telescope ghq list<CR>
# nnoremap <Space>tf <Cmd>Telescope find_files hidden=true follow=true<CR>
# nnoremap <Space>tg <Cmd>Telescope live_grep<CR>
# '''

#  Util
#-----------------------------------------------
# [[plugins]] # Neovim Treesitter Playground
# repo = 'nvim-treesitter/playground'
# on_cmd = ['TSPlaygroundToggle', 'TSHighlightCapturesUnderCursor']
