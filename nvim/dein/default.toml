[[plugins]] # dark powered vim/neovim plugin manager
repo = 'Shougo/dein.vim'

[[plugins]] # An ecosystem of Vim/Neovim which allows developers to write cross-platform plugins in Deno
repo = 'vim-denops/denops.vim'

#  Editing
#-----------------------------------------------
[[plugins]] # create your own text objects
repo = 'kana/vim-textobj-user'

[[plugins]] # text objects for indented blocks of lines
repo = 'kana/vim-textobj-indent'
depends = ['vim-textobj-user']

# [[plugins]] # Text objects for numbers
# repo = 'tkhren/vim-textobj-numeral'
# depends = ['vim-textobj-user']
# hook_add = '''
# let g:textobj_numeral_no_default_key_mappings = 1
# xmap an <Plug>(textobj-numeral-a)
# omap an <Plug>(textobj-numeral-a)
# xmap in <Plug>(textobj-numeral-i)
# omap in <Plug>(textobj-numeral-i)
# '''

[[plugins]] # deleting, changing, and adding surroundings
repo = 'tpope/vim-surround'

[[plugins]] # enable repeating supported plugin maps with dot
repo = 'tpope/vim-repeat'

[[plugins]] # pasting with indentation adjusted to paste destination
repo = 'sickill/vim-pasta'
hook_add = '''
let g:pasta_disabled_filetypes = [
  \ "python", "markdown", "yaml",
  \ "nerdtree", "dirvish",
\ ]
'''

[[plugins]] # a genius template engine
repo = 'creasty/mold.vim'
hook_add = '''
augroup _init_mold
  autocmd!
  autocmd User MoldTemplateLoadPre  call user#plugin#mold#before_load()
  autocmd User MoldTemplateLoadPost call user#plugin#mold#after_load()
augroup END
'''

[[plugins]] # The ultimate snippet solution for Vim
repo = 'SirVer/ultisnips'
hook_add = '''
let g:UltiSnipsSnippetDirectories = ['ultisnips']
let g:UltiSnipsRemoveSelectModeMappings = 0
let g:UltiSnipsEnableSnipMate = 0
let g:UltiSnipsExpandTrigger = '<Plug>(ultisnips-expand)'
let g:UltiSnipsJumpForwardTrigger = '<Plug>(ultisnips-jump-forward)'
let g:UltiSnipsJumpBackwardTrigger = '<Plug>(ultisnips-jump-backward)'
let g:UltiSnipsListSnippets = '<Plug>(ultisnips-list)'
'''

[[plugins]] # Intellisense engine for Vim8 & Neovim, full language server protocol support as VSCode
repo = 'neoclide/coc.nvim'
rev = 'release'
merged = 0
hook_add = '''
call user#plugin#coc#init()
'''

[[plugins]] # Dev setup for init.lua and plugin development with full signature help, docs and completion for the nvim lua API.
repo = 'folke/lua-dev.nvim'

[[plugins]] # switch segments of text with predefined replacements
repo = 'AndrewRadev/switch.vim'
hook_add = '''
let g:switch_mapping = ''
let g:switch_custom_definitions = [
  \ switch#Words(['public', 'protected', 'private']),
  \ switch#Words(['and', 'or']),
  \ switch#Words(['if', 'unless']),
  \ switch#NormalizedCaseWords(['true', 'false']),
  \ switch#NormalizedCaseWords(['on', 'off']),
  \ switch#NormalizedCaseWords(['yes', 'no']),
\ ]

nnoremap <silent> - <Cmd>Switch<CR>
'''

[[plugins]] # sequencial numbering with pattern
repo = 'deris/vim-rengbang'
hook_add = '''
let g:rengbang_default_usefirst = 1
let g:rengbang_default_pattern = '\(\<\d\+\>\)'
'''

#  Treesitter
#-----------------------------------------------
[[plugins]] # Treesitter configurations and abstraction layer for Neovim
repo = 'nvim-treesitter/nvim-treesitter'
merged = 0
hook_post_update = '''
:TSUpdate
'''
hook_post_source = '''
lua require('user.plugin.treesitter')
'''

[[plugins]] # A plugin for Neovim that helps you surf through your document and move elements around using the nvim-treesitter API.
repo = 'ziontee113/syntax-tree-surfer'
depends = ['nvim-treesitter']
hook_add = '''
xnoremap <SID>(sts) <Nop>
xnoremap <script> s <SID>(sts)
xnoremap <script> <SID>(sts)s <SID>(sts)

" Visual Selection from Normal Mode
nnoremap <script><silent> vN <Cmd>STSSelectMasterNode<CR><SID>(sts)
nnoremap <script><silent> vn <Cmd>STSSelectCurrentNode<CR><SID>(sts)

" Select Nodes in Visual Mode
xnoremap <script><silent> <SID>(sts)j <Cmd>STSSelectNextSiblingNode<CR><SID>(sts)
xnoremap <script><silent> <SID>(sts)k <Cmd>STSSelectPrevSiblingNode<CR><SID>(sts)
xnoremap <script><silent> <SID>(sts)h <Cmd>STSSelectParentNode<CR><SID>(sts)
xnoremap <script><silent> <SID>(sts)l <Cmd>STSSelectChildNode<CR><SID>(sts)

" Swapping Nodes in Visual Mode
xnoremap <script><silent> <SID>(sts)J <Cmd>STSSwapNextVisual<CR><SID>(sts)
xnoremap <script><silent> <SID>(sts)K <Cmd>STSSwapPrevVisual<CR><SID>(sts)
'''

[[plugins]] # Use treesitter to autoclose and autorename html tag
repo = 'windwp/nvim-ts-autotag'
depends = ['nvim-treesitter']

[[plugins]] # Yet another tree-sitter powered indent plugin for Neovim
repo = 'yioneko/nvim-yati'
depends = ['nvim-treesitter']

[[plugins]] # Wisely add "end" in Ruby, Vimscript, Lua, etc
repo = 'RRethy/nvim-treesitter-endwise'
depends = ['nvim-treesitter']

[[plugins]] # Format operators and delimiters as you type, using tree-sitter
repo = 'creasty/opfmt'
depends = ['nvim-treesitter']
path = '/Users/creasty/go/src/github.com/creasty/opfmt'

#  UI
#-----------------------------------------------
[[plugins]] # toggle, display and navigate marks
repo = 'kshenoy/vim-signature'
hook_add = '''
let g:SignatureIncludeMarks = 'abcdefghijklmnopqrtuvwxyz'
let g:SignatureMarkTextHL = 'Statement'
'''

# [[plugins]] # a tree explorer
# repo = 'scrooloose/nerdtree'
# hook_add = '''
# let g:NERDSpaceDelims = 1
# let g:NERDShutUp = 1
# let g:NERDTreeShowHidden = 1
# let g:NERDTreeIgnore = ['\~$', '\.git$']
# let g:NERDTreeAutoDeleteBuffer = 1
#
# let g:loaded_nerdtree_fs_menu = 1
# '''

[[plugins]] # Path navigator designed to work with Vim's built-in mechanisms
repo = 'justinmk/vim-dirvish'
hook_add = '''
let g:dirvish_mode = 2
'''

# [[plugins]] # Indent guides for Neovim
# repo = 'lukas-reineke/indent-blankline.nvim'
# hook_add = '''
# lua << EOF
# require("indent_blankline").setup {
#   char = '▏',
#   show_first_indent_level = false,
#   use_treesitter = true,
# }
# EOF
# '''

#  ddu
#-----------------------------------------------
[[plugins]] # Dark deno-powered UI framework for neovim/Vim8
repo = 'Shougo/ddu.vim'
depends = ['denops.vim']
hook_add = '''
call user#plugin#ddu#init()

augroup _init_ddu
  autocmd!
  autocmd FileType ddu-ff call user#plugin#ddu#init_buffer()
  autocmd FileType ddu-ff-filter call user#plugin#ddu#init_buffer()
augroup END

command! -nargs=0 Open :call user#plugin#ddu#open()
command! -nargs=? -bang -complete=dir Search :call user#plugin#ddu#search(<q-args>, <bang>0)

nnoremap <silent> <C-q> <Cmd>Open<CR>
nnoremap <silent> <Space>/ <Cmd>Search!<CR>
'''

[[plugins]] # Fuzzy finder ui for ddu.vim
repo = 'Shougo/ddu-ui-ff'

[[plugins]] # File kind for ddu.vim
repo = 'Shougo/ddu-kind-file'

[[plugins]] # Action source for ddu.vim
repo = 'Shougo/ddu-source-action'

[[plugins]] # Fzy filter for ddu.vim
repo = 'matsui54/ddu-filter-fzy'

#  Runner
#-----------------------------------------------
[[plugins]] # run commands quickly
repo = 'thinca/vim-quickrun'
hook_add = '''
let g:quickrun_config = {}
let g:quickrun_config['_'] = {
  \ 'runner': 'nvim_job',
  \ 'outputter/buffer/split': ':botright 15sp',
\ }

nmap <Leader>r <Plug>(quickrun)
'''
