[[plugins]] # dark powered vim/neovim plugin manager
repo = 'Shougo/dein.vim'

#  Editing
#-----------------------------------------------
[[plugins]] # create your own text objects
repo = 'kana/vim-textobj-user'

[[plugins]] # text objects for indented blocks of lines
repo = 'kana/vim-textobj-indent'
depends = ['vim-textobj-user']

[[plugins]] # text objects for multiple types of parentheses
repo = 'osyo-manga/vim-textobj-multiblock'
depends = ['vim-textobj-user']
hook_add = '''
omap ab <Plug>(textobj-multiblock-a)
omap ib <Plug>(textobj-multiblock-i)
xmap ab <Plug>(textobj-multiblock-a)
xmap ib <Plug>(textobj-multiblock-i)
'''

[[plugins]] # Text objects for numbers
repo = 'tkhren/vim-textobj-numeral'
depends = ['vim-textobj-user']

[[plugins]] # deleting, changing, and adding surroundings
repo = 'tpope/vim-surround'

[[plugins]] # pasting with indentation adjusted to paste destination
repo = 'sickill/vim-pasta'

[[plugins]] # a genius template engine
repo = 'creasty/mold.vim'
hook_add = '''
let g:mold_dir = expand('~/.config/nvim/template')

augroup _init_mold
  autocmd!
  autocmd User MoldTemplateLoadPre  call user#plugin#mold#before_load()
  autocmd User MoldTemplateLoadPost call user#plugin#mold#after_load()
augroup END
'''

[[plugins]] # The ultimate snippet solution for Vim
repo = 'SirVer/ultisnips'
hook_add = '''
let g:UltiSnipsSnippetDirectories = ['ultisnips']
let g:UltiSnipsRemoveSelectModeMappings = 0
let g:UltiSnipsEnableSnipMate = 0
let g:UltiSnipsExpandTrigger = '<Plug>(ultisnips-expand)'
let g:UltiSnipsJumpForwardTrigger = '<Plug>(ultisnips-jump-forward)'
let g:UltiSnipsJumpBackwardTrigger = '<Plug>(ultisnips-jump-backward)'
let g:UltiSnipsListSnippets = '<Plug>(ultisnips-list)'
'''

[[plugins]] # enable repeating supported plugin maps with dot
repo = 'tpope/vim-repeat'

[[plugins]] # run commands quickly
repo = 'thinca/vim-quickrun'
hook_add = '''
let g:quickrun_config = {}
let g:quickrun_config['_'] = {
  \ 'runner': 'neovim_job',
  \ 'outputter/buffer/split': ':botright 15sp',
\ }

nmap <Leader>r <Plug>(quickrun)
'''

[[plugins]] # Non official job runner of vim-quickrun for Neovim
repo = 'lambdalisue/vim-quickrun-neovim-job'
depends = ['vim-quickrun']

[[plugins]] # Intellisense engine for Vim8 & Neovim, full language server protocol support as VSCode
repo = 'neoclide/coc.nvim'
rev = 'release'
merged = 0
hook_add = '''
call user#plugin#coc#init()
'''

[[plugins]] # switch segments of text with predefined replacements
repo = 'AndrewRadev/switch.vim'
hook_add = '''
let g:switch_mapping = ''
let g:switch_custom_definitions = [
  \ switch#Words(['public', 'protected', 'private']),
  \ switch#Words(['and', 'or']),
  \ switch#Words(['if', 'unless']),
  \ switch#NormalizedCaseWords(['true', 'false']),
  \ switch#NormalizedCaseWords(['on', 'off']),
  \ switch#NormalizedCaseWords(['yes', 'no']),
\ ]
'''

[[plugins]] # sequencial numbering with pattern
repo = 'deris/vim-rengbang'
hook_add = '''
let g:rengbang_default_usefirst = 1
let g:rengbang_default_pattern = '\(\<\d\+\>\)'
'''

[[plugins]] # Neovim/Vim plugin for easy async search and replace across multiple files
repo = 'eugen0329/vim-esearch'
hook_add = '''
let g:esearch = {}
let g:esearch.regex = 1
let g:esearch.textobj = 0
let g:esearch.case = 'smart'
'''

[[plugins]] # EditorConfig Vim Plugin
repo = 'editorconfig/editorconfig-vim'
hook_add = '''
let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']
'''

[[plugins]] # Treesitter configurations and abstraction layer for Neovim
repo = 'nvim-treesitter/nvim-treesitter'
merged = 0
hook_post_update = '''
:TSUpdate
'''
hook_post_source = '''
lua require('user.plugin.treesitter')
'''

[[plugins]] # Create your own textobjects using tree-sitter queries!
repo = 'nvim-treesitter/nvim-treesitter-textobjects'
depends = ['nvim-treesitter']

[[plugins]] # Use treesitter to autoclose and autorename html tag
repo = 'windwp/nvim-ts-autotag'
depends = ['nvim-treesitter']

#  UI
#-----------------------------------------------
[[plugins]] # toggle, display and navigate marks
repo = 'kshenoy/vim-signature'
hook_add = '''
let g:SignatureIncludeMarks = 'abcdefghijklmnopqrtuvwxyz'
let g:SignatureMarkTextHL = 'Statement'
'''

[[plugins]] # search status
repo = 'osyo-manga/vim-anzu'

[[plugins]] # Highlight the current search result differently
repo = 'qxxxb/vim-searchhi'
hook_add = '''
let g:searchhi_user_autocmds_enabled = 1
let g:searchhi_redraw_before_on = 1

nmap n <Plug>(searchhi-n)
nmap N <Plug>(searchhi-N)
nmap * <Plug>(searchhi-*)
nmap g* <Plug>(searchhi-g*)
nmap # <Plug>(searchhi-#)
nmap g# <Plug>(searchhi-g#)
'''

[[plugins]] # a tree explorer
repo = 'scrooloose/nerdtree'
hook_add = '''
let g:NERDSpaceDelims = 1
let g:NERDShutUp = 1
let g:NERDTreeShowHidden = 1
let g:NERDTreeIgnore = ['\~$', '\.git$']
let g:NERDTreeAutoDeleteBuffer = 1

let g:loaded_nerdtree_fs_menu = 1
'''
