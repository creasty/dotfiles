
#  Chrome remote console
#-----------------------------------------------
cr() {
  crconsole

  if [ $? -eq 1 ]; then
    killall 'Google Chrome'
    open -ga "Google Chrome" --args -remote-debugging-port=9222
    sleep 1
    crconsole
  fi
}


#  Create a new directory and enter it
#-----------------------------------------------
mkd() {
  mkdir -p "$@" && cd "$@"
}


#  Project root (.git dir)
#-----------------------------------------------
cdrt() {
  if git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    cd `git rev-parse --show-toplevel`
  fi
}


#  Development directory
#-----------------------------------------------
cdd() {
  _files -W ~/Develop 2> /dev/null && return 0

  if [ $# -gt 0 ]; then
    cd "$HOME/Develop/$1"
  else
    cd ~/Develop
  fi
}


#  Git sync
#-----------------------------------------------
gsy() {
  git a && git cm "$1" && git pl && git pu
}


#  SSH
#-----------------------------------------------
sshc() {
  _files -W ~/.ssh/hosts 2> /dev/null && return 0

  cat ~/.ssh/hosts/* > ~/.ssh/config

  [ $# -gt 0 ] && ssh $1
}


#  Extractors (zsh only)
#-----------------------------------------------
extract() {
  case $1 in
    *.tar.gz|*.tgz)  tar xzvf $1;;
    *.tar.xz)        tar Jxvf $1;;
    *.zip)           unzip $1;;
    *.lzh)           lha e $1;;
    *.tar.bz2|*.tbz) tar xjvf $1;;
    *.tar.Z)         tar zxvf $1;;
    *.gz)            gzip -dc $1;;
    *.bz2)           bzip2 -dc $1;;
    *.Z)             uncompress $1;;
    *.tar)           tar xvf $1;;
    *.arj)           unarj $1;;
  esac
}


#  Create a data URL from a file
#-----------------------------------------------
dataurl() {
  local mimeType=$(file -b --mime-type "$1")
  if [[ $mimeType == text/* ]]; then
    mimeType="${mimeType};charset=utf-8"
  fi
  echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}


#  Add reminder (OS X 10.8)
#-----------------------------------------------
remind() {
  local text
  if [ -t 0 ]; then
    text="$1" # argument
  else
    text=$(cat) # pipe
  fi
  osascript >/dev/null <<EOF
tell application "Reminders"
  tell the default list
    make new reminder with properties {name:"$text"}
  end tell
end tell
EOF
}


#  Change network location setting
#-----------------------------------------------
chloc() {
  MSG=`scselect | egrep -i "\($1" | cut -c 4- | cut -f 1 | head -n 1 | xargs scselect | sed -E 's/.+ \((.+)\)/Location changed to \1/'`

  if [ "$MSG" = "" ]; then
    growlnotify -a /System/Library/PreferencePanes/Network.prefPane -m "Unable to change location" Error
  else
    growlnotify -a /System/Library/PreferencePanes/Network.prefPane -m "$MSG" Location changed
  fi
}


#  Use recycle bin
#-----------------------------------------------
TRASHDIR=~/.trash

del() {
  local path
  for path in "$@"; do
    # ignore any arguments
    if [[ "$path" = -* ]]; then
      echo "del doesn't understand any arguments. Should use /bin/rm."
      return
    else
      # create trash if necessary
      if [ ! -d $TRASHDIR ]; then
        /bin/mkdir -p $TRASHDIR
      fi

      local dst=${path##*/}
      # append the time if necessary
      while [ -e $TRASHDIR"/$dst" ]; do
        dst="$dst "$(date +%H-%M-%S)
      done
      /bin/mv "$path" $TRASHDIR/"$dst"
    fi
  done
}

# never use rm
alias rm="del"

# empty trash
alias trash-look="ls -al $TRASHDIR/ 2> /dev/null"
alias trash-clean="/bin/rm -R -f $TRASHDIR/*"
alias clean=trash-clean


#  Change iTerm's tab title
#-----------------------------------------------
title() {
  echo -ne "\033]0;"$*"\007"
}

