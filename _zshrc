
plugins=(svn git perl ruby linux osx)

#  Base
#-----------------------------------------------
# 日本語ファイル名を表示可能にする
setopt print_eight_bit

# 補完機能を有効にする
fpath=($HOME/dotfiles/zsh-completions/src $fpath)
autoload -Uz compinit
compinit

# ヒストリの設定
setopt no_share_history
HISTFILE=~/.zsh_history
HISTSIZE=100000
SAVEHIST=100000
setopt auto_pushd

# Oh my zsh
source ~/.oh-my-zsh/oh-my-zsh.sh

# command correct edition before each completion attempt
setopt correct

# auto directory pushd that you can get dirs list by cd -[tab]
setopt auto_pushd

# no beep sound when complete list displayed
setopt nolistbeep

# emacs like keybind
bindkey -e


#  Apperance
#-----------------------------------------------
# ZSH_THEME="skaro"

# set terminal title including current directory
case "${TERM}" in
  kterm*|xterm)
      precmd() {
          echo -ne "\033]0;${USER}@${HOST%%.*}:${PWD}\007"
      }
      ;;
esac


#  Prompt
#-----------------------------------------------
# source ~/.git-prompt.sh
#
# GIT_PS1_SHOWDIRTYSTATE=1
# GIT_PS1_SHOWUNTRACKEDFILES=1
# GIT_PS1_SHOWUPSTREAM=1
#
# XPS1='\[\e[34m\]\
# \W\
# \[\e[00m\]\[\e[33m\]\
# `__git_ps1`\
# \[\e[00m\] \$ \[\e[0m\]'

ZSH_THEME_GIT_PROMPT_PREFIX="[⭠ %{$fg[red]%}"
ZSH_THEME_GIT_PROMPT_SUFFIX="%{$reset_color%}"
ZSH_THEME_GIT_PROMPT_DIRTY="%{$fg[blue]%}] %{$fg[yellow]%}✗%{$reset_color%}"
ZSH_THEME_GIT_PROMPT_CLEAN="%{$fg[blue]%}]"
# PROMPT='%{%(?.$fg_bold[green].$fg_bold[red])%}%h %{$fg[cyan]%}%2~ %{$fg_bold[blue]%}$(git_prompt_info) %{$reset_color%}» '

case ${UID} in
  0)
    PROMPT="%B%{^[[31m%}%/#%{^[[m%}%b "
    PROMPT2="%B%{^[[31m%}%_#%{^[[m%}%b "
    SPROMPT="%B%{^[[31m%}%r is correct? [n,y,a,e]:%{^[[m%}%b "
    [ -n "${REMOTEHOST}${SSH_CONNECTION}" ] &&
      PROMPT="%{^[[37m%}${HOST%%.*} ${PROMPT}"
    ;;
  *)
    PROMPT="%{^[[31m%}%/%%%{^[[m%} "
    PROMPT2="%{^[[31m%}%_%%%{^[[m%} "
    SPROMPT="%{^[[31m%}%r is correct? [n,y,a,e]:%{^[[m%} "
    [ -n "${REMOTEHOST}${SSH_CONNECTION}" ] &&
      PROMPT="%{^[[37m%}${HOST%%.*} ${PROMPT}"
    ;;
esac

show_buffer_stack() {
  POSTDISPLAY="
  stack: $LBUFFER"
  zle push-line
}
zle -N show_buffer_stack
bindkey "^[q" show_buffer_stack


#  Change network location setting
#-----------------------------------------------
chloc() {
  MSG=`scselect | egrep -i "\($1" | cut -c 4- | cut -f 1 | head -n 1 | xargs scselect | sed -E 's/.+ \((.+)\)/Location changed to \1/'`

  if [ "$MSG" = "" ]; then
    growlnotify -a /System/Library/PreferencePanes/Network.prefPane -m "Unable to change location" Error
  else
    growlnotify -a /System/Library/PreferencePanes/Network.prefPane -m "$MSG" Location changed
  fi
}


#  Auto rehash after gem un/install
#-----------------------------------------------
gem() {
  $HOME/.rbenv/shims/gem $*
  if [ "$1" = "install" ] || [ "$1" = "i" ] || [ "$1" = "uninstall" ] || [ "$1" = "uni" ]
  then
    rbenv rehash
    rehash
  fi
}


#  一定時間以上かかった処理の終了時に通知
#-----------------------------------------------
local COMMAND=""
local COMMAND_TIME=""
precmd() {
  if [ "$COMMAND_TIME" -ne "0" ] ; then
    local d=`date +%s`
    d=`expr $d - $COMMAND_TIME`
    if [ "$d" -ge "30" ] ; then
      COMMAND="$COMMAND "
      which growlnotify > /dev/null 2>&1 && growlnotify -t "${${(s: :)COMMAND}[1]}" -m "$COMMAND";
    fi
  fi
  COMMAND="0"
  COMMAND_TIME="0"
}
preexec () {
  COMMAND="${1}"
  if [ "`perl -e 'print($ARGV[0]=~/ssh|^vi/)' $COMMAND`" -ne 1 ] ; then
    COMMAND_TIME=`date +%s`
  fi
}

