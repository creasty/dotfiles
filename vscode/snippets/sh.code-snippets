{
  "Print a message to stderr": {
    "prefix": "warn",
    "body": "echo '$0' 1>&2",
    "scope": "sh,bash,zsh"
  },
  "Print an error message and exit": {
    "prefix": "fatal",
    "body": ["echo '$0' 1>&2", "exit 1"],
    "scope": "sh,bash,zsh"
  },
  "Ask for input": {
    "prefix": "ask",
    "body": ["ask() {", "\techo -n \"\\$1\"", "\tread REPLY", "}"],
    "scope": "sh,bash,zsh"
  },
  "cd to the script directory": {
    "prefix": "cdrt",
    "body": "cd \"$(dirname \\$0)/..\"",
    "scope": "sh,bash,zsh"
  },
  "Check if a command exists": {
    "prefix": "command",
    "body": "command -v '$0' > /dev/null 2>&1",
    "scope": "sh,bash,zsh"
  },
  "Load .env file": {
    "prefix": "dotenv",
    "body": [
      "if [ -f .env ]; then",
      "\tset -o allexport",
      "\teval \"\\$(cat .env | grep -v '^#')\"",
      "\tset +o allexport",
      "fi"
    ],
    "scope": "sh,bash,zsh"
  },
  "Load envchain": {
    "prefix": "envchain",
    "body": [
      "set -o allexport",
      "eval \"\\$(envchain -l -v ${1:namespace})\"",
      "set +o allexport"
    ],
    "scope": "sh,bash,zsh"
  },
  "Print help message": {
    "prefix": "do_help",
    "body": [
      "do_help() {",
      "\tcat \"\\$0\" | sed -n -E '/^#>/s/^#>[ ]?//p'",
      "\texit 1",
      "}"
    ],
    "scope": "sh,bash,zsh"
  },
  "Error if there's output": {
    "prefix": "errifout",
    "body": "awk '{ e = 1; print \\$0 } END { if (e) exit(1) }'",
    "scope": "sh,bash,zsh"
  },
  "getopts with while": {
    "prefix": "getopts",
    "body": [
      "while getopts ${1:options} OPT;; do",
      "\t# Refer \\$OPTARG to retrieve a value",
      "\tcase \"\\$OPT\" in",
      "\t\t$0",
      "\tesac",
      "",
      "shift \\$((OPTIND - 1))"
    ],
    "scope": "sh,bash,zsh"
  },
  "Custom option parser": {
    "prefix": "parse_opt",
    "body": [
      "parse_opt() {",
      "\tcase \"\\$1\" in",
      "\t\t${1:opt_name})",
      "\t\t\t$0",
      "\t\t\treturn ${2:1}",
      "\t\t\t;;",
      "\tesac",

      "\techo \"Invalid option: \\$1\" 1>&2",
      "\texit 1",
      "}",
      "",
      "while (( \\$# > 0 )); do",
      "\tcase \"\\$1\" in",
      "\t\t--) shift; break ;;",
      "\t\t--*)",
      "\t\t\tparse_opt \"\\${1:2}\" \"\\${@:2}\" || shift \\$?",
      "\t\t\t;;",
      "\t\t-*)",
      "\t\t\tif [[ \"\\$1\" =~ ^-[a-z0-9]{2,}\\$ ]]; then",
      "\t\t\t\twhile read -n1 c && [ -n \"\\$c\" ]; do",
      "\t\t\t\t\tparse_opt \"\\$c\" '' || true",
      "\t\t\t\tdone <<< \"\\${1:1}\"",
      "\t\t\t\tshift",
      "\t\t\telse",
      "\t\t\t\tparse_opt \"\\${1:1}\" \"\\${@:2}\" || shift \\$?",
      "\t\t\tfi",
      "\t\t\t;;",
      "\t\t*) break ;;",
      "\tesac",
      "done"
    ],
    "scope": "sh,bash,zsh"
  },
  "Iterate each line": {
    "prefix": "line",
    "body": ["while IFS= read -r line; do", "\t$0", "done"],
    "scope": "sh,bash,zsh"
  },
  "print_info": {
    "prefix": "print_info",
    "body": [
      "print_info() {",
      "\tprintf -- \"\\e[0;34m[Info]\\e[0m \\$@\\n\" 1>&2",
      "}"
    ],
    "scope": "sh,bash,zsh"
  },
  "print_success": {
    "prefix": "print_success",
    "body": [
      "print_success() {",
      "\tprintf -- \"\\e[0;32m[Success]\\e[0m \\$@\\n\" 1>&2",
      "}"
    ],
    "scope": "sh,bash,zsh"
  },
  "print_error": {
    "prefix": "print_error",
    "body": [
      "print_error() {",
      "\tprintf -- \"\\e[0;31m[Error]\\e[0m \\$@\\n\" 1>&2",
      "}"
    ],
    "scope": "sh,bash,zsh"
  },
  "print_status": {
    "prefix": "print_status",
    "body": [
      "print_status() {",
      "\tif [ \\$1 -eq 0 ]; then",
      "\t\tprint_success \"OK\"",
      "\telse",
      "\t\tprint_info \"\\$2\"",
      "\tfi",
      "}"
    ],
    "scope": "sh,bash,zsh"
  },
  "section": {
    "prefix": "section",
    "body": ["section() {", "\tprintf -- \"\\e[33m==> \\$@\\e[0m\\n\"", "}"],
    "scope": "sh,bash,zsh"
  },
  "subsection": {
    "prefix": "subsection",
    "body": ["subsection() {", "\tprintf -- \"\\e[34m--> \\$@\\e[0m\\n\"", "}"],
    "scope": "sh,bash,zsh"
  },
  "Debug output while piping": {
    "prefix": "teepipe",
    "body": "awk '{ print \\$0; print \\$0 > \"/dev/stderr\" }'",
    "scope": "sh,bash,zsh"
  },
  "Tran and at_exit": {
    "prefix": "trap",
    "body": [
      "at_exit() {",
      "\t$0",
      "}",
      "trap at_exit EXIT",
      "trap 'trap - EXIT; at_exit; exit -1' SIGHUP SIGINT SIGTERM"
    ],
    "scope": "sh,bash,zsh"
  }
}
