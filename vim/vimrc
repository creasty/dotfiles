"----------------------------------------------------------------------------------------------
"                                        _
"                                 _   __(_)___ ___  __________
"                                | | / / / __ `__ \/ ___/ ___/
"                                | |/ / / / / / / / /  / /__
"                                |___/_/_/ /_/ /_/_/   \___/
"
"                                 github.com/creasty/dotfiles
"
"----------------------------------------------------------------------------------------------

"=== Environment
"==============================================================================================
" encoding
set encoding=utf-8
scriptencoding utf-8

" unregister autocmds
augroup vimrc
  autocmd!
augroup END


"=== Plugins
"==============================================================================================
if &compatible
  set nocompatible
endif

if has('vim_starting')
  let &g:rtp .= ',' . vimrc#env.path.dein_repo
endif

let g:dein#_plugins = {}

if dein#load_state(vimrc#env.path.dein)
  call dein#begin(vimrc#env.path.dein, [expand('<sfile>'), vimrc#env.path.dein_toml, vimrc#env.path.dein_lazy_toml])

  call dein#load_toml(vimrc#env.path.dein_toml,      { 'lazy': 0 })
  call dein#load_toml(vimrc#env.path.dein_lazy_toml, { 'lazy': 1 })

  call dein#end()
  call dein#save_state()
endif

if dein#check_install()
  call dein#install()
endif

filetype plugin indent on


"=== Load
"==============================================================================================
function! s:load_file(file)
  let l:file = g:vimrc#env.path.vimrcd . '/' . a:file . '.vim'

  if filereadable(l:file)
    execute 'source ' . l:file
  else
    echomsg 'file not readable:' l:file
  endif
endfunction

if dein#tap('dein.vim')
  command! DeinPrunePlugins
    \ call map(dein#check_clean(), "delete(v:val, 'rf')") |
    \ call dein#recache_runtimepath() |
    \ echo 'done'
endif

if dein#tap('vim-textobj-multiblock')
  let g:textobj_multiblock_blocks = [
    \ [ '(', ')' ],
    \ [ '[', ']' ],
    \ [ '{', '}' ],
    \ [ '<', '>' ],
    \ [ '"', '"' ],
    \ [ "'", "'" ],
    \ [ '「', '」' ],
    \ [ '（', '）' ],
  \ ]

  omap ab <Plug>(textobj-multiblock-a)
  omap ib <Plug>(textobj-multiblock-i)
  xmap ab <Plug>(textobj-multiblock-a)
  xmap ib <Plug>(textobj-multiblock-i)
endif

if dein#tap('surround.vim')
  nmap ,( csw(
  nmap ,) csw)
  nmap ,{ csw{
  nmap ,} csw}
  nmap ,[ csw[
  nmap ,] csw]
  nmap ,' csw'
  nmap ," csw"
endif

if dein#tap('vim-easy-align')
  let g:easy_align_delimiters = {
    \ '=': {
      \ 'pattern':       '===\|<=>\|=\~[#?]\?\|=>\|[:+/*!%^=><&|.-?]*=[#?]\?'
      \                  . '\|[-=]>\|<[-=]',
      \ 'left_margin':   1,
      \ 'right_margin':  1,
      \ 'stick_to_left': 0,
    \ },
    \ ';': {
      \ 'pattern':       ':',
      \ 'left_margin':   0,
      \ 'right_margin':  1,
      \ 'stick_to_left': 1
    \ },
  \ }

  vnoremap <silent> L :EasyAlign<cr>
endif

if dein#tap('emmet-vim')
  let g:user_emmet_install_global = 0
  let g:user_emmet_mode = 'i'
  let g:user_emmet_leader_key = '<Nop>'
  let g:user_emmet_settings = {
    \ 'indentation': '  ',
  \ }
endif

if dein#tap('operator-camelize.vim')
  vmap C <Plug>(operator-camelize-toggle)
endif

if dein#tap('vim-operator-replace')
  map r <Plug>(operator-replace)
  noremap R r
endif

if dein#tap('lexima.vim')
  call vimrc#plugin#lexima#init()
endif

if dein#tap('switch.vim')
  nnoremap <silent> - :call vimrc#plugin#switch#toggle()<CR>
endif

if dein#tap('vim-textmanip')
  call vimrc#plugin#textmanip#init()
endif

if dein#tap('mold.vim')
  call vimrc#plugin#mold#init()
endif

if dein#tap('vim-lsp')
  call vimrc#plugin#lsp#init()
endif

if dein#tap('deoplete.nvim')
  call vimrc#plugin#deoplete#init()
endif

if dein#tap('vim-minisnip')
  let g:minisnip_backrefmarker = '='

  " disable default mappings
  map <Plug>(minisnip-nop) <Plug>(minisnip)
  map <Plug>(minisnip-complete-nop) <Plug>(minisnip-complete)

  " trigger with Tab in select mode
  smap <silent> <expr> <Tab> minisnip#ShouldTrigger() ? "\<Esc>:call minisnip#Minisnip()\<CR>" : "<Nop>"
endif

if dein#tap('nerdtree')
  call s:load_file('plugin/nerdtree')
endif
if dein#tap('denite.nvim')
  call s:load_file('plugin/denite')
endif
if dein#tap('vim-altr')
  call s:load_file('plugin/vim-altr')
endif
if dein#tap('vim-fugitive')
  call s:load_file('plugin/vim-fugitive')
endif
if dein#tap('vim-quickrun')
  call s:load_file('plugin/vim-quickrun')
endif
if dein#tap('neomake')
  call s:load_file('plugin/neomake')
endif
if dein#tap('vim-submode')
  call s:load_file('plugin/vim-submode')
endif
if dein#tap('vim-signature')
  call s:load_file('plugin/vim-signature')
endif
if dein#tap('vim-searchhi')
  call s:load_file('plugin/vim-searchhi')
endif
