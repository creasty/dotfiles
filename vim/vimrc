"----------------------------------------------------------------------------------------------
"                                        _
"                                 _   __(_)___ ___  __________
"                                | | / / / __ `__ \/ ___/ ___/
"                                | |/ / / / / / / / /  / /__
"                                |___/_/_/ /_/ /_/_/   \___/
"
"                                 github.com/creasty/dotfiles
"
"----------------------------------------------------------------------------------------------

" encoding
set encoding=utf-8
scriptencoding utf-8

" disable builtin plugins
let g:loaded_gzip = 1
let g:loaded_tar = 1
let g:loaded_tarPlugin = 1
let g:loaded_zip = 1
let g:loaded_zipPlugin = 1
let g:loaded_rrhelper = 1
let g:loaded_2html_plugin = 1
let g:loaded_vimball = 1
let g:loaded_vimballPlugin = 1
let g:loaded_getscript = 1
let g:loaded_getscriptPlugin = 1
let g:loaded_netrwPlugin = 1
let g:loaded_netrwSettings = 1
let g:loaded_netrwFileHandlers = 1
let g:loaded_logipat = 1

" configure runtime features
let g:omni_sql_no_default_maps = 1
let g:tex_flavor = 'latex'

" use comma as leader
let g:mapleader = ','

" unregister autocmds
augroup vimrc
  autocmd!
augroup END


"=== Dein
"==============================================================================================
if has('vim_starting')
  let &g:rtp .= ',' . g:vimrc#env.path.dein_repo
endif

let g:dein#_plugins = {}

if dein#load_state(g:vimrc#env.path.dein)
  call dein#begin(g:vimrc#env.path.dein, [expand('<sfile>'), g:vimrc#env.path.dein_toml, g:vimrc#env.path.dein_lazy_toml])

  call dein#load_toml(g:vimrc#env.path.dein_toml,      { 'lazy': 0 })
  call dein#load_toml(g:vimrc#env.path.dein_lazy_toml, { 'lazy': 1 })

  call dein#end()
  call dein#save_state()
endif

if dein#check_install()
  call dein#install()
endif

filetype plugin indent on


"=== Load
"==============================================================================================
if dein#tap('candle.vim')
  colorscheme candle
  set t_Co=256
  syntax enable
endif

if dein#tap('dein.vim')
  command! DeinPrunePlugins
    \ call map(dein#check_clean(), "delete(v:val, 'rf')") |
    \ call dein#recache_runtimepath() |
    \ echo 'done'
endif

if dein#tap('vim-textobj-multiblock')
  let g:textobj_multiblock_blocks = [
    \ [ '(', ')' ],
    \ [ '[', ']' ],
    \ [ '{', '}' ],
    \ [ '<', '>' ],
    \ [ '"', '"' ],
    \ [ "'", "'" ],
    \ [ '「', '」' ],
    \ [ '（', '）' ],
  \ ]

  omap ab <Plug>(textobj-multiblock-a)
  omap ib <Plug>(textobj-multiblock-i)
  xmap ab <Plug>(textobj-multiblock-a)
  xmap ib <Plug>(textobj-multiblock-i)
endif

if dein#tap('surround.vim')
  nmap ,( csw(
  nmap ,) csw)
  nmap ,{ csw{
  nmap ,} csw}
  nmap ,[ csw[
  nmap ,] csw]
  nmap ,' csw'
  nmap ," csw"
endif

if dein#tap('vim-easy-align')
  let g:easy_align_delimiters = {
    \ '=': {
      \ 'pattern':       '===\|<=>\|=\~[#?]\?\|=>\|[:+/*!%^=><&|.-?]*=[#?]\?'
      \                  . '\|[-=]>\|<[-=]',
      \ 'left_margin':   1,
      \ 'right_margin':  1,
      \ 'stick_to_left': 0,
    \ },
    \ ';': {
      \ 'pattern':       ':',
      \ 'left_margin':   0,
      \ 'right_margin':  1,
      \ 'stick_to_left': 1
    \ },
  \ }

  xnoremap <silent> L :EasyAlign<cr>
endif

if dein#tap('emmet-vim')
  let g:user_emmet_install_global = 0
  let g:user_emmet_mode = 'i'
  let g:user_emmet_leader_key = '<Nop>'
  let g:user_emmet_settings = {
    \ 'indentation': '  ',
  \ }
endif

if dein#tap('operator-camelize.vim')
  xmap C <Plug>(operator-camelize-toggle)
endif

if dein#tap('vim-operator-replace')
  nmap r <Plug>(operator-replace)
  xmap r <Plug>(operator-replace)
  omap r <Plug>(operator-replace)
  nnoremap R r
  xnoremap R r
  onoremap R r
endif

if dein#tap('lexima.vim')
  call vimrc#plugin#lexima#init()
endif

if dein#tap('switch.vim')
  nnoremap <silent> - :call vimrc#plugin#switch#toggle()<CR>
endif

if dein#tap('vim-textmanip')
  let g:textmanip_enable_mappings = 0

  let g:textmanip_hooks = {}
  function! g:textmanip_hooks.finish(tm) abort
    let l:tm = a:tm
    let l:helper = textmanip#helper#get()
    if !l:tm.linewise
      call l:helper.remove_trailing_WS(l:tm)
    endif
  endfunction

  " move selection
  xmap <C-j> <Plug>(textmanip-move-down)
  xmap <C-k> <Plug>(textmanip-move-up)
  xmap <C-h> <Plug>(textmanip-move-left)
  xmap <C-l> <Plug>(textmanip-move-right)

  " duplicate line
  xmap <Space><C-j> <Plug>(textmanip-duplicate-down)
  xmap <Space><C-k> <Plug>(textmanip-duplicate-up)
  xmap <Space><C-h> <Plug>(textmanip-duplicate-left)
  xmap <Space><C-l> <Plug>(textmanip-duplicate-right)
endif

if dein#tap('mold.vim')
  autocmd vimrc User MoldTemplateLoadPre  call vimrc#plugin#mold#template_before_load()
  autocmd vimrc User MoldTemplateLoadPost call vimrc#plugin#mold#template_after_load()
endif

if dein#tap('ultisnips')
  let g:UltiSnipsSnippetDirectories = ['ultisnips']
  let g:UltiSnipsRemoveSelectModeMappings = 0
  let g:UltiSnipsEnableSnipMate = 0

  let g:UltiSnipsExpandTrigger = '<Plug>(ultisnips-expand)'
  let g:UltiSnipsJumpForwardTrigger = '<Plug>(ultisnips-jump-forward)'
  let g:UltiSnipsJumpBackwardTrigger = '<Plug>(ultisnips-jump-backward)'
  let g:UltiSnipsListSnippets = '<Plug>(ultisnips-list)'
endif

if dein#tap('vim-lsp')
  call vimrc#plugin#lsp#init()
endif

if dein#tap('deoplete.nvim')
  call vimrc#plugin#deoplete#init()
endif

if dein#tap('nerdtree')
  let g:NERDSpaceDelims = 1
  let g:NERDShutUp = 1
  let g:NERDTreeShowHidden = 1
  let g:NERDTreeIgnore = ['\~$', '\.git$']
  let g:NERDTreeAutoDeleteBuffer = 1
endif

if dein#tap('denite.nvim')
  call dein#set_hook('denite.nvim', 'hook_source', function('vimrc#plugin#denite#lazy_init'))

  nnoremap <silent> <C-q> :<C-u>call vimrc#plugin#denite#open_best()<CR>

  command! Ag :Denite -mode=normal -buffer-name=grep -resume grep
  nnoremap <Space>/ :Ag<CR>

  command! I18n :Denite -mode=normal -buffer-name=i18n_flow -resume i18n_flow
  nnoremap <Space>i :I18n<CR>
endif

if dein#tap('vim-altr')
  call dein#set_hook('vim-altr', 'hook_source', function('vimrc#plugin#altr#lazy_init'))

  nmap ga <Plug>(altr-forward)
  nmap gA <Plug>(altr-back)
endif

if dein#tap('vim-fugitive')
  call dein#set_hook('vim-fugitive', 'hook_source', function('vimrc#plugin#fugitive#lazy_init'))
endif

if dein#tap('vim-quickrun')
  let g:quickrun_config = {}
  let g:quickrun_config['_'] = {
    \ 'runner':                        'job',
    \ 'outputter/buffer/split':        ':botright 15sp',
    \ 'outputter/buffer/running_mark': '',
  \ }
  let g:quickrun_config['ruby.rspec'] = {
    \ 'type':    'ruby.rspec',
    \ 'command': 'rspec',
    \ 'cmdopt':  'bundle exec',
    \ 'exec':    '%o %c %s',
  \ }

  nmap <Leader>r <Plug>(quickrun)
endif

if dein#tap('neomake')
  call vimrc#plugin#neomake#init()
endif

if dein#tap('vim-submode')
  call vimrc#plugin#submode#init()
endif

if dein#tap('vim-signature')
  " hide upper case marks
  let g:SignatureIncludeMarks = 'abcdefghijklmnopqrtuvwxyz'

  " highlight
  let g:SignatureMarkTextHL = 'Statement'
endif

if dein#tap('vim-searchhi')
  let g:searchhi_user_autocmds_enabled = 1
  let g:searchhi_redraw_before_on = 1

  nmap n <Plug>(searchhi-n)
  nmap N <Plug>(searchhi-N)
  nmap * <Plug>(searchhi-*)
  nmap g* <Plug>(searchhi-g*)
  nmap # <Plug>(searchhi-#)
  nmap g# <Plug>(searchhi-g#)

  autocmd vimrc User ClearSearchHighlight
    \ call searchhi#clear(0, 0) |
    \ call searchhi#await(0, 0)

  if dein#tap('vim-anzu')
    autocmd vimrc User SearchHiOn AnzuUpdateSearchStatusOutput
    autocmd vimrc User SearchHiOff echo g:anzu_no_match_word
  endif

  if g:colors_name ==# 'candle'
    autocmd vimrc VimEnter,Syntax *
      \ call candle#highlight('CurrentSearch', 'background', 'orange', 'bold')
  endif
endif
