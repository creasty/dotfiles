"----------------------------------------------------------------------------------------------
"                                        _
"                                 _   __(_)___ ___  __________
"                                | | / / / __ `__ \/ ___/ ___/
"                                | |/ / / / / / / / /  / /__
"                                |___/_/_/ /_/ /_/_/   \___/
"
"                                 github.com/creasty/dotfiles
"
"----------------------------------------------------------------------------------------------

"=== Environment
"==============================================================================================
" encoding
set encoding=utf-8
scriptencoding utf-8

" disable default plugins
let g:loaded_gzip              = 1
let g:loaded_tar               = 1
let g:loaded_tarPlugin         = 1
let g:loaded_zip               = 1
let g:loaded_zipPlugin         = 1
let g:loaded_rrhelper          = 1
let g:loaded_2html_plugin      = 1
let g:loaded_vimball           = 1
let g:loaded_vimballPlugin     = 1
let g:loaded_getscript         = 1
let g:loaded_getscriptPlugin   = 1
let g:loaded_netrw             = 1
let g:loaded_netrwPlugin       = 1
let g:loaded_netrwSettings     = 1
let g:loaded_netrwFileHandlers = 1
let g:loaded_LogiPat           = 1
let g:loaded_logipat           = 1
let g:loaded_tutor_mode_plugin = 1
let g:loaded_man               = 1

" runtime plugins
let g:omni_sql_no_default_maps = 1
let g:tex_flavor = 'latex'

" g:env
function! s:vimrc_environment()
  let l:env = {}

  let l:env.is_starting = has('vim_starting')
  let l:env.is_gui = has('gui_running')

  let l:env.hostname = substitute(hostname(), '[^\w.]', '', '')

  let l:env.sid = matchstr(expand('<sfile>'), '<SNR>\zs\d\+\ze_vimrc_environment$')

  let l:dotfiles_path = $HOME . '/dotfiles'
  let l:vim_path = l:dotfiles_path . '/vim'

  let l:env.path = {
    \ 'dotfiles':       l:dotfiles_path,
    \ 'dein':           l:vim_path . '/dein',
    \ 'dein_repo':      l:vim_path . '/dein/repos/github.com/Shougo/dein.vim',
    \ 'dein_toml':      l:vim_path . '/dein.toml',
    \ 'dein_lazy_toml': l:vim_path . '/dein_lazy.toml',
    \ 'vimrcd':         l:vim_path . '/vimrc.d',
    \ 'dict':           l:vim_path . '/dict',
    \ 'template':       l:vim_path . '/templates',
  \ }

  let l:env.support = {
    \ 'ag':        executable('ag'),
    \ 'identify':  executable('identify'),
    \ 'osascript': executable('osascript'),
    \ 'autochdir': exists('+autochdir'),
  \ }

  return l:env
endfunction

let g:env = s:vimrc_environment()

function! s:with_snr(name)
  return '<SNR>' . g:env.sid . '_' . a:name
endfunction

function! s:load_file(file)
  let l:file = g:env.path.vimrcd . '/' . a:file . '.vim'

  if filereadable(l:file)
    execute 'source ' . l:file
  else
    echomsg 'file not readable:' l:file
  endif
endfunction

" unregister autocmds
augroup vimrc
  autocmd!
augroup END


"=== Plugins
"==============================================================================================
if &compatible
  set nocompatible
endif

if g:env.is_starting
  let &g:rtp .= ',' . g:env.path.dein_repo
endif

let g:dein#_plugins = {}

if dein#load_state(g:env.path.dein)
  call dein#begin(g:env.path.dein, [expand('<sfile>'), g:env.path.dein_toml, g:env.path.dein_lazy_toml])

  call dein#load_toml(g:env.path.dein_toml,      { 'lazy': 0 })
  call dein#load_toml(g:env.path.dein_lazy_toml, { 'lazy': 1 })

  call dein#end()
  call dein#save_state()
endif

if dein#check_install()
  call dein#install()
endif

filetype plugin indent on


"=== Load
"==============================================================================================
call s:load_file('base/encoding')
call s:load_file('base/base')
call s:load_file('base/appearance')
call s:load_file('base/tab_and_status')
call s:load_file('base/editing')
call s:load_file('base/utils')

call s:load_file('custom/auto_save')
call s:load_file('custom/last_closed_buffer')
call s:load_file('custom/project_dir')
call s:load_file('custom/text_objects')

if dein#tap('vim-textobj-multiblock')
  call s:load_file('plugin/vim-textobj-multiblock')
endif
if dein#tap('surround.vim')
  call s:load_file('plugin/surround')
endif
if dein#tap('vim-easy-align')
  call s:load_file('plugin/vim-easy-align')
endif
if dein#tap('emmet-vim')
  call s:load_file('plugin/emmet-vim')
endif
if dein#tap('operator-camelize.vim')
  call s:load_file('plugin/operator-camelize')
endif
if dein#tap('vim-operator-replace')
  call s:load_file('plugin/vim-operator-replace')
endif
if dein#tap('lexima.vim')
  call s:load_file('plugin/lexima')
endif
if dein#tap('switch.vim')
  call s:load_file('plugin/switch')
endif
if dein#tap('vim-textmanip')
  call s:load_file('plugin/vim-textmanip')
endif
if dein#tap('mold.vim')
  call s:load_file('plugin/mold')
endif
if dein#tap('deoplete.nvim')
  call s:load_file('plugin/deoplete')
endif
if dein#tap('vim-minisnip')
  call s:load_file('plugin/vim-minisnip')
endif
if dein#tap('nerdtree')
  call s:load_file('plugin/nerdtree')
endif
if dein#tap('denite.nvim')
  call s:load_file('plugin/denite')
endif
if dein#tap('vim-altr')
  call s:load_file('plugin/vim-altr')
endif
if dein#tap('vim-quickrun')
  call s:load_file('plugin/vim-quickrun')
endif
if dein#tap('neomake')
  call s:load_file('plugin/neomake')
endif
if dein#tap('vim-submode')
  call s:load_file('plugin/vim-submode')
endif
if dein#tap('vim-tags')
  call s:load_file('plugin/vim-tags')
endif
if dein#tap('vim-signature')
  call s:load_file('plugin/vim-signature')
endif
if dein#tap('vim-anzu')
  call s:load_file('plugin/vim-anzu')
endif
