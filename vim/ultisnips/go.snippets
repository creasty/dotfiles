# snippet func "Function/method" b
# func (${1:receiver} ${2:type}) ${3:name}(${4:params})${5/(.+)/ /}${5:type} {
# 	${0:${VISUAL}}
# }
# endsnippet

#  Postfix
#-----------------------------------------------
snippet "(\S+)\.var" "name := expr" r
${1:`!p
element_name = match.group(1).lstrip('$@')
ematch = re.search("([A-Za-z][A-Za-z0-9_]+?)s?[^A-Za-z0-9_]*?$", element_name)
try:
	wmatch = re.search("([A-Za-z][A-Za-z0-9_]+)$", ematch.group(1))
	snip.rv = wmatch.group(1).lower()
except:
	snip.rv = 'name'
`} := `!p snip.rv=match.group(1)`$0
endsnippet

snippet "(\S+)\.varr" "var name T = expr" r
var ${1:`!p
element_name = match.group(1).lstrip('$@')
ematch = re.search("([A-Za-z][A-Za-z0-9_]+?)s?[^A-Za-z0-9_]*?$", element_name)
try:
	wmatch = re.search("([A-Za-z][A-Za-z0-9_]+)$", ematch.group(1))
	snip.rv = wmatch.group(1).lower()
except:
	snip.rv = 'name'
`} ${2:Type} = `!p snip.rv=match.group(1)`$0
endsnippet

snippet "(\S+)\.const" "const name = expr" r
const ${1:`!p
element_name = match.group(1).lstrip('$@')
ematch = re.search("([A-Za-z][A-Za-z0-9_]+?)s?[^A-Za-z0-9_]*?$", element_name)
try:
	wmatch = re.search("([A-Za-z][A-Za-z0-9_]+)$", ematch.group(1))
	snip.rv = wmatch.group(1).lower()
except:
	snip.rv = 'name'
`} = `!p snip.rv=match.group(1)`$0
endsnippet

snippet "(\S+)\.if" "if expr" r
if ${1:`!p snip.rv = match.group(1)`} {
	$0
}
endsnippet

snippet "(\S+)\.else" "if !expr" r
if !${1:`!p snip.rv = match.group(1)`} {
	$0
}
endsnippet

snippet "(\S+)\.(null|nil)" "if expr == nil" r
if ${1:`!p snip.rv = match.group(1)`} == nil {
	$0
}
endsnippet

snippet "(\S+)\.(notnull|notnil|nn)" "if expr != nil" r
if ${1:`!p snip.rv = match.group(1)`} != nil {
	$0
}
endsnippet

snippet "(\S+)\.for" "for item := range expr" r
for ${2:item} := range ${1:`!p snip.rv = match.group(1)`} {
	$0
}
endsnippet

snippet "(\S+)\.fori" "for k, v := range expr" r
for ${2:k}, ${3:v} := range ${1:`!p snip.rv = match.group(1)`} {
	$0
}
endsnippet

snippet "(\S+)\.while" "for expr" r
for ${1:`!p snip.rv = match.group(1)`} {
	$0
}
endsnippet

snippet "(\S+)\.switch" "switch expr" r
switch ${1:`!p snip.rv = match.group(1)`} {
	$0
}
endsnippet
