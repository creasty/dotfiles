#  Date/time helpers
#-----------------------------------------------
snippet beginning_of_month "Beginning of month" w
date_sub(date(timestamp_trunc(current_timestamp(), month), '+9'), interval ${1:month}} month)$0
endsnippet

snippet end_of_month "End of month" w
date_sub(date_sub(date_trunc(current_date(), month), interval ${1:month} month), interval 1 day)$0
endsnippet

snippet date_in_window "Date helpers for a moving window" b
create temp function d_window() returns int64 as ((
	${1:28}
));

create temp function date_in_window(d date, wd date) returns bool as ((
	d between date_sub(wd, interval d_window() - 1 day) and wd
));$0
endsnippet

snippet day_ago "N day ago" w
date_sub(current_date('+9'), interval ${1:day} day)$0
endsnippet

snippet format_date "format_date(string, date)" w
format_date('${1:%Y%m%d}', ${2:date})
endsnippet

snippet format_timestamp "format_timestamp(string, timestamp)" w
format_timestamp('%F %T UTC', ${1:timestamp})
endsnippet

snippet limit_suffix "limit_suffix(string, date, date)" b
create temp function limit_suffix(suffix string, start_date date, end_date date) returns bool as ((
	suffix between format_date('%Y%m%d', start_date) and format_date('%Y%m%d', end_date)
));$0
endsnippet

snippet period "Period helpers" b
create temp function d_start() returns date as ((
	date_sub(current_date('+9'), interval 28 * 3 day)
));
create temp function d_end() returns date as ((
	date_sub(current_date('+9'), interval 1 day)
));$0
endsnippet

snippet period_array "period_array()" b
create temp function period_array() returns array<date> as ((
	generate_date_array(
		d_start(),
		d_end(),
		interval 1 day
	)
));$0
endsnippet

snippet period_selector "Period selector helpers" b
create temp function ts_in_period(ts timestamp, s int64, e int64) returns bool as ((
	date(ts, '+9') between date_add(d_start(), interval s day) and date_add(d_end(), interval e day)
));

create temp function suffix_in_period(suffix string, s int64, e int64) returns bool as ((
	suffix between format_date('%Y%m%d', date_add(d_start(), interval s day)) and format_date('%Y%m%d', date_add(d_end(), interval e day))
));$0
endsnippet

snippet ts_to_month "ts_to_month(timestamp)" b
create temp function ts_to_month(ts timestamp) returns string as ((
	format_date('%Y-%m', date(ts, '+9'))
));$0
endsnippet

#  String
#-----------------------------------------------
snippet extract_id_from_path "Extract ID from path" b
create temp function extract_id_from_path(path string, pattern string) returns int64 as ((
	cast(regexp_extract_all(path, pattern)[safe_offset(0)] as int64)
));$0
endsnippet

snippet extract_json_int "Extract int from JSON" b
create temp function extract_json_int(json string, path string) returns int64 as ((
	cast(regexp_extract(json_extract_scalar(json, path), r'\d+') as int64)
));$0
endsnippet

#  Statements
#-----------------------------------------------
snippet func "Create temp function" b
create temp function ${1:name}(${2:args}) returns ${3:type} as ((
	$0
));
endsnippet

snippet median "Create median_* function" b
-- median_${1:float64}(array_agg(t.value))
create temp function median_$1(arr array<$1>) returns struct<
	value $1,
	min $1,
	average float64,
	max $1,
	rank int64,
	max_rank int64,
	cumulative_total $1,
	total $1,
	rank_percent float64,
	total_percent float64
> as ((
	with
		series as (
			select
				value,
				(row_number() over (order by value)) as rank
			from
				unnest(arr) as value
		),
		cumulative_series as (
			select
				any_value(s.value) as value,
				s.rank,
				(max(s.rank) over ()) as max_rank,
				(sum(ss.value)) as cumulative_total,
				(sum(any_value(s.value)) over ()) as total,
				(min(any_value(s.value)) over ()) as min,
				(avg(any_value(s.value)) over ()) as average,
				(max(any_value(s.value)) over ()) as max
			from
				series as s
				cross join series as ss
			where
				ss.rank <= s.rank
			group by
				s.rank
		)

	select
		struct(
			s.value,
			s.min,
			s.average,
			s.max,
			s.rank,
			s.max_rank,
			s.cumulative_total,
			s.total,
			(s.rank / s.max_rank) as rank_percent,
			(s.cumulative_total / s.total) as total_percent
		)
	from
		cumulative_series as s
	where
		s.cumulative_total >= s.total * 0.5
	order by
		s.rank
	limit 1
));$0
endsnippet

#  Wantedly
#-----------------------------------------------
snippet wtd_countries "Country helpers" b
create temp function countries() returns array<struct<code string, rank int64>> as ((
	[
		struct('JP' as code, 0 as rank),
		struct('SG' as code, 1 as rank),
		struct('HK' as code, 2 as rank),
		struct('DE' as code, 3 as rank)
	]
));

create temp function match_country(cd string) returns bool as ((
	cd in ('JP', 'SG', 'HK', 'DE')
));

create temp function match_country_code(cd string, name string) returns bool as ((
	concat(cd, ':', name) in (
		'JP:japan',
		'SG:singapore',
		'HK:hong_kong',
		'DE:germany'
	)
));
endsnippet

snippet wtd_visit_endpoints "visit_endpoints(string, string, string)" b
create temp function visit_endpoints(controller string, action string, referrer string) returns bool as ((
	(
		controller in (
			'projects', 'messages', 'candidacies', 'search', 'category_tags', 'staffings', 'profiles',
			'api/v1/projects', 'api/v1/candidacies', 'api/v1/feeds', 'api/v1/users', 'api/v1/notifications',
			'api/v2/projects', 'api/v2/candidacies', 'api/v2/feeds', 'api/v2/users', 'api/v2/notifications'
		)
		or (controller = 'campaigns' and action = 'newgrad')
		or (
			(controller = 'posts' and action = 'show')
			or (controller = 'employee_interviews' and action = 'show')
			or (controller = 'post_articles' and action = 'show')
			or (controller = 'post_spaces')
			or (controller = 'feeds' and action in ('company_posts', 'posts', 'index') and referrer not like '%companies%')
		)
	)
));$0
endsnippet

snippet wtd_plan_name "plan_name(int64)" b
-- puts CompanyAccount.plans.hash.invert.to_json
create temp function plan_name(cd int64) returns string language js as """
	const dict = {"0":"trial","1":"standard_2012","2":"premium_2012","3":"standard","4":"premium","5":"startup","6":"small_business","7":"business","8":"enterprise","9":"lite_2016_half","10":"lite_2016_year","11":"lite_2016_month","12":"lite_2016_three_month","13":"deprecated_2015","14":"standard_2016_half","15":"standard_2016_year","16":"standard_2016_month","17":"standard_2016_three_month","18":"complimentary_three_month","19":"lite_2016_two_year","20":"standard_2016_two_year","21":"international_starter_half","22":"international_starter_year","23":"international_standard_half","24":"international_standard_year","25":"international_enterprise","26":"standard_2017_half","27":"standard_2017_year","28":"standard_2017_two_year","29":"lite_2017_half","30":"lite_2017_year","31":"lite_2017_two_year","32":"minimum_2017_half","33":"minimum_2017_year","34":"minimum_2017_two_year","35":"standard_2017_month","36":"standard_2017_three_month","37":"lite_2017_month","38":"lite_2017_three_month","39":"minimum_2017_month","40":"minimum_2017_three_month"};
	return dict[cd] || ("unknown(" + cd + ")")
""";$0
endsnippet
