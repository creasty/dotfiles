snippet if
	if [ ${1:#:condition} ]; then
		${0:TARGET}
	fi

snippet el
	else
		${0:TARGET}

snippet elif
	elif [ ${1:#:condition} ]; then
		${0:TARGET}

snippet for
	for ${1:i} in ${2:#:words}; do
		${0:TARGET}
	done

snippet while
alias wh
	while ${1:#:condition} ; do
		${0:TARGET}
	done

snippet until
	until ${1:#:condition} ; do
		${0:TARGET}
	done

snippet here
alias   h
	<<${1}
		${0:TARGET}

snippet match-regexp
abbr =~
options head
	if [[ $${1:string} =~ ${2:^regexp.*} ]]; then
		${0}
	fi

snippet case
options head
	case "$${1:{name\}}" in
		${2:pattern*})
			${0}
			;;
	esac

snippet warn
options head
	echo "${0:TARGET}" 1>&2

snippet abort
options head
	echo "${0:TARGET}" 1>&2
	exit 1

snippet trap
	at_exit() {
		${0}
	}
	trap at_exit EXIT
	trap 'trap - EXIT; at_exit; exit -1' SIGHUP SIGINT SIGTERM

snippet cdrt
	cd "$(dirname \$0)/.."

snippet envchain
	set -o allexport
	eval "$(envchain -l -v wtd)"
	set +o allexport

snippet dotenv
	if [ -f .env ]; then
		set -o allexport
		eval "$(cat .env | grep -v '^#')"
		set +o allexport
	fi

snippet +section
	section() {
		printf "\e[33m==> \$1\e[0m\n"
	}

snippet +subsection
	subsection() {
		printf "\e[34m--> \$1\e[0m\n"
	}

snippet +ask
	ask() {
		echo -n "\$1"
		read REPLY
	}

snippet +ask_for_confirmation
	ask_for_confirmation() {
		ask "\$1 [yN] "
	}

snippet +answer_is_yes
	answer_is_yes() {
		if [[ "$REPLY" =~ ^[Yy]$ ]]; then
			return 0
		else
			return 1
		fi
	}

snippet +print_error
	print_error() {
		printf "\e[0;31m[Error]\e[0m $@\n" 1>&2
	}

snippet +print_success
	print_success() {
		printf "\e[0;32m[Success]\e[0m $@\n"
	}

snippet +print_info
	print_info() {
		printf "\e[0;34m[Info]\e[0m $@\n"
	}

snippet +print_status
	print_status() {
		if [ \$1 -eq 0 ]; then
			print_success "\${2:-"OK"}"
		else
			print_info "\${2:-"Done with error"}"
		fi
	}

snippet command
	command -v "${0}"
