-- median_float64(array_agg(t.value))
create temp function median_{{+float64+}}(arr array<{{+~=1+}}>) returns struct<
  value {{+~=1+}},
  min {{+~=1+}},
  average float64,
  max {{+~=1+}},
  rank int64,
  max_rank int64,
  cumulative_total {{+~=1+}},
  total {{+~=1+}},
  rank_percent float64,
  total_percent float64
> as ((
  with
    series as (
      select
        value,
        (row_number() over (order by value)) as rank
      from
        unnest(arr) as value
    ),
    cumulative_series as (
      select
        any_value(s.value) as value,
        s.rank,
        (max(s.rank) over ()) as max_rank,
        (sum(ss.value)) as cumulative_total,
        (sum(any_value(s.value)) over ()) as total,
        (min(any_value(s.value)) over ()) as min,
        (avg(any_value(s.value)) over ()) as average,
        (max(any_value(s.value)) over ()) as max
      from
        series as s
        cross join series as ss
      where
        ss.rank <= s.rank
      group by
        s.rank
    )

  select
    struct(
      s.value,
      s.min,
      s.average,
      s.max,
      s.rank,
      s.max_rank,
      s.cumulative_total,
      s.total,
      (s.rank / s.max_rank) as rank_percent,
      (s.cumulative_total / s.total) as total_percent
    )
  from
    cumulative_series as s
  where
    s.cumulative_total >= s.total * 0.5
  order by
    s.rank
  limit 1
));{{--}}
